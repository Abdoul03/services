
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model clientCanal
 * 
 */
export type clientCanal = $Result.DefaultSelection<Prisma.$clientCanalPayload>
/**
 * Model commissionDuMois
 * 
 */
export type commissionDuMois = $Result.DefaultSelection<Prisma.$commissionDuMoisPayload>
/**
 * Model creditEntreprise
 * 
 */
export type creditEntreprise = $Result.DefaultSelection<Prisma.$creditEntreprisePayload>
/**
 * Model prepayee
 * 
 */
export type prepayee = $Result.DefaultSelection<Prisma.$prepayeePayload>
/**
 * Model serviceEntreprise
 * 
 */
export type serviceEntreprise = $Result.DefaultSelection<Prisma.$serviceEntreprisePayload>
/**
 * Model transInternation
 * 
 */
export type transInternation = $Result.DefaultSelection<Prisma.$transInternationPayload>
/**
 * Model uvAbonnement
 * 
 */
export type uvAbonnement = $Result.DefaultSelection<Prisma.$uvAbonnementPayload>
/**
 * Model caisse
 * 
 */
export type caisse = $Result.DefaultSelection<Prisma.$caissePayload>
/**
 * Model Profile
 * 
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const nomService: {
  CANAL_PLUS: 'CANAL_PLUS',
  MALIVISION: 'MALIVISION',
  WAVE: 'WAVE',
  ORANGE_MONEY: 'ORANGE_MONEY',
  MOBICASH: 'MOBICASH',
  SAMA_MONEY: 'SAMA_MONEY',
  CREDIT_ORANGE: 'CREDIT_ORANGE',
  CREDIT_MALITEL: 'CREDIT_MALITEL',
  CREDIT_TELECEL: 'CREDIT_TELECEL',
  W_MG_RIA: 'W_MG_RIA'
};

export type nomService = (typeof nomService)[keyof typeof nomService]


export const transInter: {
  WESTERUNION: 'WESTERUNION',
  MONEYGRAM: 'MONEYGRAM',
  RIA: 'RIA'
};

export type transInter = (typeof transInter)[keyof typeof transInter]


export const uvTele: {
  CANALPlus: 'CANALPlus',
  MALIVISION: 'MALIVISION'
};

export type uvTele = (typeof uvTele)[keyof typeof uvTele]

}

export type nomService = $Enums.nomService

export const nomService: typeof $Enums.nomService

export type transInter = $Enums.transInter

export const transInter: typeof $Enums.transInter

export type uvTele = $Enums.uvTele

export const uvTele: typeof $Enums.uvTele

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more ClientCanals
 * const clientCanals = await prisma.clientCanal.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more ClientCanals
   * const clientCanals = await prisma.clientCanal.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.clientCanal`: Exposes CRUD operations for the **clientCanal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClientCanals
    * const clientCanals = await prisma.clientCanal.findMany()
    * ```
    */
  get clientCanal(): Prisma.clientCanalDelegate<ExtArgs>;

  /**
   * `prisma.commissionDuMois`: Exposes CRUD operations for the **commissionDuMois** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CommissionDuMois
    * const commissionDuMois = await prisma.commissionDuMois.findMany()
    * ```
    */
  get commissionDuMois(): Prisma.commissionDuMoisDelegate<ExtArgs>;

  /**
   * `prisma.creditEntreprise`: Exposes CRUD operations for the **creditEntreprise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CreditEntreprises
    * const creditEntreprises = await prisma.creditEntreprise.findMany()
    * ```
    */
  get creditEntreprise(): Prisma.creditEntrepriseDelegate<ExtArgs>;

  /**
   * `prisma.prepayee`: Exposes CRUD operations for the **prepayee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Prepayees
    * const prepayees = await prisma.prepayee.findMany()
    * ```
    */
  get prepayee(): Prisma.prepayeeDelegate<ExtArgs>;

  /**
   * `prisma.serviceEntreprise`: Exposes CRUD operations for the **serviceEntreprise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceEntreprises
    * const serviceEntreprises = await prisma.serviceEntreprise.findMany()
    * ```
    */
  get serviceEntreprise(): Prisma.serviceEntrepriseDelegate<ExtArgs>;

  /**
   * `prisma.transInternation`: Exposes CRUD operations for the **transInternation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TransInternations
    * const transInternations = await prisma.transInternation.findMany()
    * ```
    */
  get transInternation(): Prisma.transInternationDelegate<ExtArgs>;

  /**
   * `prisma.uvAbonnement`: Exposes CRUD operations for the **uvAbonnement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UvAbonnements
    * const uvAbonnements = await prisma.uvAbonnement.findMany()
    * ```
    */
  get uvAbonnement(): Prisma.uvAbonnementDelegate<ExtArgs>;

  /**
   * `prisma.caisse`: Exposes CRUD operations for the **caisse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Caisses
    * const caisses = await prisma.caisse.findMany()
    * ```
    */
  get caisse(): Prisma.caisseDelegate<ExtArgs>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    clientCanal: 'clientCanal',
    commissionDuMois: 'commissionDuMois',
    creditEntreprise: 'creditEntreprise',
    prepayee: 'prepayee',
    serviceEntreprise: 'serviceEntreprise',
    transInternation: 'transInternation',
    uvAbonnement: 'uvAbonnement',
    caisse: 'caisse',
    Profile: 'Profile',
    User: 'User'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "clientCanal" | "commissionDuMois" | "creditEntreprise" | "prepayee" | "serviceEntreprise" | "transInternation" | "uvAbonnement" | "caisse" | "profile" | "user"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      clientCanal: {
        payload: Prisma.$clientCanalPayload<ExtArgs>
        fields: Prisma.clientCanalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.clientCanalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientCanalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.clientCanalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientCanalPayload>
          }
          findFirst: {
            args: Prisma.clientCanalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientCanalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.clientCanalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientCanalPayload>
          }
          findMany: {
            args: Prisma.clientCanalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientCanalPayload>[]
          }
          create: {
            args: Prisma.clientCanalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientCanalPayload>
          }
          createMany: {
            args: Prisma.clientCanalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.clientCanalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientCanalPayload>
          }
          update: {
            args: Prisma.clientCanalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientCanalPayload>
          }
          deleteMany: {
            args: Prisma.clientCanalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.clientCanalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.clientCanalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientCanalPayload>
          }
          aggregate: {
            args: Prisma.ClientCanalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClientCanal>
          }
          groupBy: {
            args: Prisma.clientCanalGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientCanalGroupByOutputType>[]
          }
          count: {
            args: Prisma.clientCanalCountArgs<ExtArgs>
            result: $Utils.Optional<ClientCanalCountAggregateOutputType> | number
          }
        }
      }
      commissionDuMois: {
        payload: Prisma.$commissionDuMoisPayload<ExtArgs>
        fields: Prisma.commissionDuMoisFieldRefs
        operations: {
          findUnique: {
            args: Prisma.commissionDuMoisFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commissionDuMoisPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.commissionDuMoisFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commissionDuMoisPayload>
          }
          findFirst: {
            args: Prisma.commissionDuMoisFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commissionDuMoisPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.commissionDuMoisFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commissionDuMoisPayload>
          }
          findMany: {
            args: Prisma.commissionDuMoisFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commissionDuMoisPayload>[]
          }
          create: {
            args: Prisma.commissionDuMoisCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commissionDuMoisPayload>
          }
          createMany: {
            args: Prisma.commissionDuMoisCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.commissionDuMoisDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commissionDuMoisPayload>
          }
          update: {
            args: Prisma.commissionDuMoisUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commissionDuMoisPayload>
          }
          deleteMany: {
            args: Prisma.commissionDuMoisDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.commissionDuMoisUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.commissionDuMoisUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commissionDuMoisPayload>
          }
          aggregate: {
            args: Prisma.CommissionDuMoisAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommissionDuMois>
          }
          groupBy: {
            args: Prisma.commissionDuMoisGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommissionDuMoisGroupByOutputType>[]
          }
          count: {
            args: Prisma.commissionDuMoisCountArgs<ExtArgs>
            result: $Utils.Optional<CommissionDuMoisCountAggregateOutputType> | number
          }
        }
      }
      creditEntreprise: {
        payload: Prisma.$creditEntreprisePayload<ExtArgs>
        fields: Prisma.creditEntrepriseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.creditEntrepriseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$creditEntreprisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.creditEntrepriseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$creditEntreprisePayload>
          }
          findFirst: {
            args: Prisma.creditEntrepriseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$creditEntreprisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.creditEntrepriseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$creditEntreprisePayload>
          }
          findMany: {
            args: Prisma.creditEntrepriseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$creditEntreprisePayload>[]
          }
          create: {
            args: Prisma.creditEntrepriseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$creditEntreprisePayload>
          }
          createMany: {
            args: Prisma.creditEntrepriseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.creditEntrepriseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$creditEntreprisePayload>
          }
          update: {
            args: Prisma.creditEntrepriseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$creditEntreprisePayload>
          }
          deleteMany: {
            args: Prisma.creditEntrepriseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.creditEntrepriseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.creditEntrepriseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$creditEntreprisePayload>
          }
          aggregate: {
            args: Prisma.CreditEntrepriseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCreditEntreprise>
          }
          groupBy: {
            args: Prisma.creditEntrepriseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CreditEntrepriseGroupByOutputType>[]
          }
          count: {
            args: Prisma.creditEntrepriseCountArgs<ExtArgs>
            result: $Utils.Optional<CreditEntrepriseCountAggregateOutputType> | number
          }
        }
      }
      prepayee: {
        payload: Prisma.$prepayeePayload<ExtArgs>
        fields: Prisma.prepayeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.prepayeeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prepayeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.prepayeeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prepayeePayload>
          }
          findFirst: {
            args: Prisma.prepayeeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prepayeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.prepayeeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prepayeePayload>
          }
          findMany: {
            args: Prisma.prepayeeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prepayeePayload>[]
          }
          create: {
            args: Prisma.prepayeeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prepayeePayload>
          }
          createMany: {
            args: Prisma.prepayeeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.prepayeeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prepayeePayload>
          }
          update: {
            args: Prisma.prepayeeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prepayeePayload>
          }
          deleteMany: {
            args: Prisma.prepayeeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.prepayeeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.prepayeeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prepayeePayload>
          }
          aggregate: {
            args: Prisma.PrepayeeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrepayee>
          }
          groupBy: {
            args: Prisma.prepayeeGroupByArgs<ExtArgs>
            result: $Utils.Optional<PrepayeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.prepayeeCountArgs<ExtArgs>
            result: $Utils.Optional<PrepayeeCountAggregateOutputType> | number
          }
        }
      }
      serviceEntreprise: {
        payload: Prisma.$serviceEntreprisePayload<ExtArgs>
        fields: Prisma.serviceEntrepriseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.serviceEntrepriseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$serviceEntreprisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.serviceEntrepriseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$serviceEntreprisePayload>
          }
          findFirst: {
            args: Prisma.serviceEntrepriseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$serviceEntreprisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.serviceEntrepriseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$serviceEntreprisePayload>
          }
          findMany: {
            args: Prisma.serviceEntrepriseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$serviceEntreprisePayload>[]
          }
          create: {
            args: Prisma.serviceEntrepriseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$serviceEntreprisePayload>
          }
          createMany: {
            args: Prisma.serviceEntrepriseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.serviceEntrepriseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$serviceEntreprisePayload>
          }
          update: {
            args: Prisma.serviceEntrepriseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$serviceEntreprisePayload>
          }
          deleteMany: {
            args: Prisma.serviceEntrepriseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.serviceEntrepriseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.serviceEntrepriseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$serviceEntreprisePayload>
          }
          aggregate: {
            args: Prisma.ServiceEntrepriseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServiceEntreprise>
          }
          groupBy: {
            args: Prisma.serviceEntrepriseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceEntrepriseGroupByOutputType>[]
          }
          count: {
            args: Prisma.serviceEntrepriseCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceEntrepriseCountAggregateOutputType> | number
          }
        }
      }
      transInternation: {
        payload: Prisma.$transInternationPayload<ExtArgs>
        fields: Prisma.transInternationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.transInternationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transInternationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.transInternationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transInternationPayload>
          }
          findFirst: {
            args: Prisma.transInternationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transInternationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.transInternationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transInternationPayload>
          }
          findMany: {
            args: Prisma.transInternationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transInternationPayload>[]
          }
          create: {
            args: Prisma.transInternationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transInternationPayload>
          }
          createMany: {
            args: Prisma.transInternationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.transInternationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transInternationPayload>
          }
          update: {
            args: Prisma.transInternationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transInternationPayload>
          }
          deleteMany: {
            args: Prisma.transInternationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.transInternationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.transInternationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transInternationPayload>
          }
          aggregate: {
            args: Prisma.TransInternationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransInternation>
          }
          groupBy: {
            args: Prisma.transInternationGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransInternationGroupByOutputType>[]
          }
          count: {
            args: Prisma.transInternationCountArgs<ExtArgs>
            result: $Utils.Optional<TransInternationCountAggregateOutputType> | number
          }
        }
      }
      uvAbonnement: {
        payload: Prisma.$uvAbonnementPayload<ExtArgs>
        fields: Prisma.uvAbonnementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.uvAbonnementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$uvAbonnementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.uvAbonnementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$uvAbonnementPayload>
          }
          findFirst: {
            args: Prisma.uvAbonnementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$uvAbonnementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.uvAbonnementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$uvAbonnementPayload>
          }
          findMany: {
            args: Prisma.uvAbonnementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$uvAbonnementPayload>[]
          }
          create: {
            args: Prisma.uvAbonnementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$uvAbonnementPayload>
          }
          createMany: {
            args: Prisma.uvAbonnementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.uvAbonnementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$uvAbonnementPayload>
          }
          update: {
            args: Prisma.uvAbonnementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$uvAbonnementPayload>
          }
          deleteMany: {
            args: Prisma.uvAbonnementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.uvAbonnementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.uvAbonnementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$uvAbonnementPayload>
          }
          aggregate: {
            args: Prisma.UvAbonnementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUvAbonnement>
          }
          groupBy: {
            args: Prisma.uvAbonnementGroupByArgs<ExtArgs>
            result: $Utils.Optional<UvAbonnementGroupByOutputType>[]
          }
          count: {
            args: Prisma.uvAbonnementCountArgs<ExtArgs>
            result: $Utils.Optional<UvAbonnementCountAggregateOutputType> | number
          }
        }
      }
      caisse: {
        payload: Prisma.$caissePayload<ExtArgs>
        fields: Prisma.caisseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.caisseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$caissePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.caisseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$caissePayload>
          }
          findFirst: {
            args: Prisma.caisseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$caissePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.caisseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$caissePayload>
          }
          findMany: {
            args: Prisma.caisseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$caissePayload>[]
          }
          create: {
            args: Prisma.caisseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$caissePayload>
          }
          createMany: {
            args: Prisma.caisseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.caisseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$caissePayload>
          }
          update: {
            args: Prisma.caisseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$caissePayload>
          }
          deleteMany: {
            args: Prisma.caisseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.caisseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.caisseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$caissePayload>
          }
          aggregate: {
            args: Prisma.CaisseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCaisse>
          }
          groupBy: {
            args: Prisma.caisseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaisseGroupByOutputType>[]
          }
          count: {
            args: Prisma.caisseCountArgs<ExtArgs>
            result: $Utils.Optional<CaisseCountAggregateOutputType> | number
          }
        }
      }
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model clientCanal
   */

  export type AggregateClientCanal = {
    _count: ClientCanalCountAggregateOutputType | null
    _avg: ClientCanalAvgAggregateOutputType | null
    _sum: ClientCanalSumAggregateOutputType | null
    _min: ClientCanalMinAggregateOutputType | null
    _max: ClientCanalMaxAggregateOutputType | null
  }

  export type ClientCanalAvgAggregateOutputType = {
    id: number | null
    numAbonne: number | null
  }

  export type ClientCanalSumAggregateOutputType = {
    id: number | null
    numAbonne: bigint | null
  }

  export type ClientCanalMinAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    telephone: string | null
    numAbonne: bigint | null
    finAbonn: Date | null
  }

  export type ClientCanalMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    telephone: string | null
    numAbonne: bigint | null
    finAbonn: Date | null
  }

  export type ClientCanalCountAggregateOutputType = {
    id: number
    nom: number
    prenom: number
    telephone: number
    numAbonne: number
    finAbonn: number
    _all: number
  }


  export type ClientCanalAvgAggregateInputType = {
    id?: true
    numAbonne?: true
  }

  export type ClientCanalSumAggregateInputType = {
    id?: true
    numAbonne?: true
  }

  export type ClientCanalMinAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    telephone?: true
    numAbonne?: true
    finAbonn?: true
  }

  export type ClientCanalMaxAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    telephone?: true
    numAbonne?: true
    finAbonn?: true
  }

  export type ClientCanalCountAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    telephone?: true
    numAbonne?: true
    finAbonn?: true
    _all?: true
  }

  export type ClientCanalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which clientCanal to aggregate.
     */
    where?: clientCanalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientCanals to fetch.
     */
    orderBy?: clientCanalOrderByWithRelationInput | clientCanalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: clientCanalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientCanals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientCanals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clientCanals
    **/
    _count?: true | ClientCanalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientCanalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientCanalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientCanalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientCanalMaxAggregateInputType
  }

  export type GetClientCanalAggregateType<T extends ClientCanalAggregateArgs> = {
        [P in keyof T & keyof AggregateClientCanal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClientCanal[P]>
      : GetScalarType<T[P], AggregateClientCanal[P]>
  }




  export type clientCanalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: clientCanalWhereInput
    orderBy?: clientCanalOrderByWithAggregationInput | clientCanalOrderByWithAggregationInput[]
    by: ClientCanalScalarFieldEnum[] | ClientCanalScalarFieldEnum
    having?: clientCanalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientCanalCountAggregateInputType | true
    _avg?: ClientCanalAvgAggregateInputType
    _sum?: ClientCanalSumAggregateInputType
    _min?: ClientCanalMinAggregateInputType
    _max?: ClientCanalMaxAggregateInputType
  }

  export type ClientCanalGroupByOutputType = {
    id: number
    nom: string
    prenom: string
    telephone: string
    numAbonne: bigint
    finAbonn: Date
    _count: ClientCanalCountAggregateOutputType | null
    _avg: ClientCanalAvgAggregateOutputType | null
    _sum: ClientCanalSumAggregateOutputType | null
    _min: ClientCanalMinAggregateOutputType | null
    _max: ClientCanalMaxAggregateOutputType | null
  }

  type GetClientCanalGroupByPayload<T extends clientCanalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientCanalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientCanalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientCanalGroupByOutputType[P]>
            : GetScalarType<T[P], ClientCanalGroupByOutputType[P]>
        }
      >
    >


  export type clientCanalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prenom?: boolean
    telephone?: boolean
    numAbonne?: boolean
    finAbonn?: boolean
  }, ExtArgs["result"]["clientCanal"]>


  export type clientCanalSelectScalar = {
    id?: boolean
    nom?: boolean
    prenom?: boolean
    telephone?: boolean
    numAbonne?: boolean
    finAbonn?: boolean
  }


  export type $clientCanalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "clientCanal"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      prenom: string
      telephone: string
      numAbonne: bigint
      finAbonn: Date
    }, ExtArgs["result"]["clientCanal"]>
    composites: {}
  }

  type clientCanalGetPayload<S extends boolean | null | undefined | clientCanalDefaultArgs> = $Result.GetResult<Prisma.$clientCanalPayload, S>

  type clientCanalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<clientCanalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClientCanalCountAggregateInputType | true
    }

  export interface clientCanalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['clientCanal'], meta: { name: 'clientCanal' } }
    /**
     * Find zero or one ClientCanal that matches the filter.
     * @param {clientCanalFindUniqueArgs} args - Arguments to find a ClientCanal
     * @example
     * // Get one ClientCanal
     * const clientCanal = await prisma.clientCanal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends clientCanalFindUniqueArgs>(args: SelectSubset<T, clientCanalFindUniqueArgs<ExtArgs>>): Prisma__clientCanalClient<$Result.GetResult<Prisma.$clientCanalPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ClientCanal that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {clientCanalFindUniqueOrThrowArgs} args - Arguments to find a ClientCanal
     * @example
     * // Get one ClientCanal
     * const clientCanal = await prisma.clientCanal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends clientCanalFindUniqueOrThrowArgs>(args: SelectSubset<T, clientCanalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__clientCanalClient<$Result.GetResult<Prisma.$clientCanalPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ClientCanal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientCanalFindFirstArgs} args - Arguments to find a ClientCanal
     * @example
     * // Get one ClientCanal
     * const clientCanal = await prisma.clientCanal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends clientCanalFindFirstArgs>(args?: SelectSubset<T, clientCanalFindFirstArgs<ExtArgs>>): Prisma__clientCanalClient<$Result.GetResult<Prisma.$clientCanalPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ClientCanal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientCanalFindFirstOrThrowArgs} args - Arguments to find a ClientCanal
     * @example
     * // Get one ClientCanal
     * const clientCanal = await prisma.clientCanal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends clientCanalFindFirstOrThrowArgs>(args?: SelectSubset<T, clientCanalFindFirstOrThrowArgs<ExtArgs>>): Prisma__clientCanalClient<$Result.GetResult<Prisma.$clientCanalPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ClientCanals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientCanalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClientCanals
     * const clientCanals = await prisma.clientCanal.findMany()
     * 
     * // Get first 10 ClientCanals
     * const clientCanals = await prisma.clientCanal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientCanalWithIdOnly = await prisma.clientCanal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends clientCanalFindManyArgs>(args?: SelectSubset<T, clientCanalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$clientCanalPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ClientCanal.
     * @param {clientCanalCreateArgs} args - Arguments to create a ClientCanal.
     * @example
     * // Create one ClientCanal
     * const ClientCanal = await prisma.clientCanal.create({
     *   data: {
     *     // ... data to create a ClientCanal
     *   }
     * })
     * 
     */
    create<T extends clientCanalCreateArgs>(args: SelectSubset<T, clientCanalCreateArgs<ExtArgs>>): Prisma__clientCanalClient<$Result.GetResult<Prisma.$clientCanalPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ClientCanals.
     * @param {clientCanalCreateManyArgs} args - Arguments to create many ClientCanals.
     * @example
     * // Create many ClientCanals
     * const clientCanal = await prisma.clientCanal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends clientCanalCreateManyArgs>(args?: SelectSubset<T, clientCanalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ClientCanal.
     * @param {clientCanalDeleteArgs} args - Arguments to delete one ClientCanal.
     * @example
     * // Delete one ClientCanal
     * const ClientCanal = await prisma.clientCanal.delete({
     *   where: {
     *     // ... filter to delete one ClientCanal
     *   }
     * })
     * 
     */
    delete<T extends clientCanalDeleteArgs>(args: SelectSubset<T, clientCanalDeleteArgs<ExtArgs>>): Prisma__clientCanalClient<$Result.GetResult<Prisma.$clientCanalPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ClientCanal.
     * @param {clientCanalUpdateArgs} args - Arguments to update one ClientCanal.
     * @example
     * // Update one ClientCanal
     * const clientCanal = await prisma.clientCanal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends clientCanalUpdateArgs>(args: SelectSubset<T, clientCanalUpdateArgs<ExtArgs>>): Prisma__clientCanalClient<$Result.GetResult<Prisma.$clientCanalPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ClientCanals.
     * @param {clientCanalDeleteManyArgs} args - Arguments to filter ClientCanals to delete.
     * @example
     * // Delete a few ClientCanals
     * const { count } = await prisma.clientCanal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends clientCanalDeleteManyArgs>(args?: SelectSubset<T, clientCanalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClientCanals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientCanalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClientCanals
     * const clientCanal = await prisma.clientCanal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends clientCanalUpdateManyArgs>(args: SelectSubset<T, clientCanalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClientCanal.
     * @param {clientCanalUpsertArgs} args - Arguments to update or create a ClientCanal.
     * @example
     * // Update or create a ClientCanal
     * const clientCanal = await prisma.clientCanal.upsert({
     *   create: {
     *     // ... data to create a ClientCanal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClientCanal we want to update
     *   }
     * })
     */
    upsert<T extends clientCanalUpsertArgs>(args: SelectSubset<T, clientCanalUpsertArgs<ExtArgs>>): Prisma__clientCanalClient<$Result.GetResult<Prisma.$clientCanalPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ClientCanals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientCanalCountArgs} args - Arguments to filter ClientCanals to count.
     * @example
     * // Count the number of ClientCanals
     * const count = await prisma.clientCanal.count({
     *   where: {
     *     // ... the filter for the ClientCanals we want to count
     *   }
     * })
    **/
    count<T extends clientCanalCountArgs>(
      args?: Subset<T, clientCanalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientCanalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClientCanal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientCanalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientCanalAggregateArgs>(args: Subset<T, ClientCanalAggregateArgs>): Prisma.PrismaPromise<GetClientCanalAggregateType<T>>

    /**
     * Group by ClientCanal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientCanalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends clientCanalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: clientCanalGroupByArgs['orderBy'] }
        : { orderBy?: clientCanalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, clientCanalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientCanalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the clientCanal model
   */
  readonly fields: clientCanalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for clientCanal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__clientCanalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the clientCanal model
   */ 
  interface clientCanalFieldRefs {
    readonly id: FieldRef<"clientCanal", 'Int'>
    readonly nom: FieldRef<"clientCanal", 'String'>
    readonly prenom: FieldRef<"clientCanal", 'String'>
    readonly telephone: FieldRef<"clientCanal", 'String'>
    readonly numAbonne: FieldRef<"clientCanal", 'BigInt'>
    readonly finAbonn: FieldRef<"clientCanal", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * clientCanal findUnique
   */
  export type clientCanalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientCanal
     */
    select?: clientCanalSelect<ExtArgs> | null
    /**
     * Filter, which clientCanal to fetch.
     */
    where: clientCanalWhereUniqueInput
  }

  /**
   * clientCanal findUniqueOrThrow
   */
  export type clientCanalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientCanal
     */
    select?: clientCanalSelect<ExtArgs> | null
    /**
     * Filter, which clientCanal to fetch.
     */
    where: clientCanalWhereUniqueInput
  }

  /**
   * clientCanal findFirst
   */
  export type clientCanalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientCanal
     */
    select?: clientCanalSelect<ExtArgs> | null
    /**
     * Filter, which clientCanal to fetch.
     */
    where?: clientCanalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientCanals to fetch.
     */
    orderBy?: clientCanalOrderByWithRelationInput | clientCanalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientCanals.
     */
    cursor?: clientCanalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientCanals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientCanals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientCanals.
     */
    distinct?: ClientCanalScalarFieldEnum | ClientCanalScalarFieldEnum[]
  }

  /**
   * clientCanal findFirstOrThrow
   */
  export type clientCanalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientCanal
     */
    select?: clientCanalSelect<ExtArgs> | null
    /**
     * Filter, which clientCanal to fetch.
     */
    where?: clientCanalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientCanals to fetch.
     */
    orderBy?: clientCanalOrderByWithRelationInput | clientCanalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientCanals.
     */
    cursor?: clientCanalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientCanals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientCanals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientCanals.
     */
    distinct?: ClientCanalScalarFieldEnum | ClientCanalScalarFieldEnum[]
  }

  /**
   * clientCanal findMany
   */
  export type clientCanalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientCanal
     */
    select?: clientCanalSelect<ExtArgs> | null
    /**
     * Filter, which clientCanals to fetch.
     */
    where?: clientCanalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientCanals to fetch.
     */
    orderBy?: clientCanalOrderByWithRelationInput | clientCanalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clientCanals.
     */
    cursor?: clientCanalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientCanals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientCanals.
     */
    skip?: number
    distinct?: ClientCanalScalarFieldEnum | ClientCanalScalarFieldEnum[]
  }

  /**
   * clientCanal create
   */
  export type clientCanalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientCanal
     */
    select?: clientCanalSelect<ExtArgs> | null
    /**
     * The data needed to create a clientCanal.
     */
    data: XOR<clientCanalCreateInput, clientCanalUncheckedCreateInput>
  }

  /**
   * clientCanal createMany
   */
  export type clientCanalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many clientCanals.
     */
    data: clientCanalCreateManyInput | clientCanalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * clientCanal update
   */
  export type clientCanalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientCanal
     */
    select?: clientCanalSelect<ExtArgs> | null
    /**
     * The data needed to update a clientCanal.
     */
    data: XOR<clientCanalUpdateInput, clientCanalUncheckedUpdateInput>
    /**
     * Choose, which clientCanal to update.
     */
    where: clientCanalWhereUniqueInput
  }

  /**
   * clientCanal updateMany
   */
  export type clientCanalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update clientCanals.
     */
    data: XOR<clientCanalUpdateManyMutationInput, clientCanalUncheckedUpdateManyInput>
    /**
     * Filter which clientCanals to update
     */
    where?: clientCanalWhereInput
  }

  /**
   * clientCanal upsert
   */
  export type clientCanalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientCanal
     */
    select?: clientCanalSelect<ExtArgs> | null
    /**
     * The filter to search for the clientCanal to update in case it exists.
     */
    where: clientCanalWhereUniqueInput
    /**
     * In case the clientCanal found by the `where` argument doesn't exist, create a new clientCanal with this data.
     */
    create: XOR<clientCanalCreateInput, clientCanalUncheckedCreateInput>
    /**
     * In case the clientCanal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<clientCanalUpdateInput, clientCanalUncheckedUpdateInput>
  }

  /**
   * clientCanal delete
   */
  export type clientCanalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientCanal
     */
    select?: clientCanalSelect<ExtArgs> | null
    /**
     * Filter which clientCanal to delete.
     */
    where: clientCanalWhereUniqueInput
  }

  /**
   * clientCanal deleteMany
   */
  export type clientCanalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which clientCanals to delete
     */
    where?: clientCanalWhereInput
  }

  /**
   * clientCanal without action
   */
  export type clientCanalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientCanal
     */
    select?: clientCanalSelect<ExtArgs> | null
  }


  /**
   * Model commissionDuMois
   */

  export type AggregateCommissionDuMois = {
    _count: CommissionDuMoisCountAggregateOutputType | null
    _avg: CommissionDuMoisAvgAggregateOutputType | null
    _sum: CommissionDuMoisSumAggregateOutputType | null
    _min: CommissionDuMoisMinAggregateOutputType | null
    _max: CommissionDuMoisMaxAggregateOutputType | null
  }

  export type CommissionDuMoisAvgAggregateOutputType = {
    id: number | null
    debit: number | null
    montant: number | null
    sold: number | null
  }

  export type CommissionDuMoisSumAggregateOutputType = {
    id: number | null
    debit: number | null
    montant: number | null
    sold: number | null
  }

  export type CommissionDuMoisMinAggregateOutputType = {
    id: number | null
    date: Date | null
    mom_service: $Enums.nomService | null
    debit: number | null
    montant: number | null
    sold: number | null
  }

  export type CommissionDuMoisMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    mom_service: $Enums.nomService | null
    debit: number | null
    montant: number | null
    sold: number | null
  }

  export type CommissionDuMoisCountAggregateOutputType = {
    id: number
    date: number
    mom_service: number
    debit: number
    montant: number
    sold: number
    _all: number
  }


  export type CommissionDuMoisAvgAggregateInputType = {
    id?: true
    debit?: true
    montant?: true
    sold?: true
  }

  export type CommissionDuMoisSumAggregateInputType = {
    id?: true
    debit?: true
    montant?: true
    sold?: true
  }

  export type CommissionDuMoisMinAggregateInputType = {
    id?: true
    date?: true
    mom_service?: true
    debit?: true
    montant?: true
    sold?: true
  }

  export type CommissionDuMoisMaxAggregateInputType = {
    id?: true
    date?: true
    mom_service?: true
    debit?: true
    montant?: true
    sold?: true
  }

  export type CommissionDuMoisCountAggregateInputType = {
    id?: true
    date?: true
    mom_service?: true
    debit?: true
    montant?: true
    sold?: true
    _all?: true
  }

  export type CommissionDuMoisAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which commissionDuMois to aggregate.
     */
    where?: commissionDuMoisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commissionDuMois to fetch.
     */
    orderBy?: commissionDuMoisOrderByWithRelationInput | commissionDuMoisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: commissionDuMoisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commissionDuMois from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commissionDuMois.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned commissionDuMois
    **/
    _count?: true | CommissionDuMoisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommissionDuMoisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommissionDuMoisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommissionDuMoisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommissionDuMoisMaxAggregateInputType
  }

  export type GetCommissionDuMoisAggregateType<T extends CommissionDuMoisAggregateArgs> = {
        [P in keyof T & keyof AggregateCommissionDuMois]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommissionDuMois[P]>
      : GetScalarType<T[P], AggregateCommissionDuMois[P]>
  }




  export type commissionDuMoisGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: commissionDuMoisWhereInput
    orderBy?: commissionDuMoisOrderByWithAggregationInput | commissionDuMoisOrderByWithAggregationInput[]
    by: CommissionDuMoisScalarFieldEnum[] | CommissionDuMoisScalarFieldEnum
    having?: commissionDuMoisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommissionDuMoisCountAggregateInputType | true
    _avg?: CommissionDuMoisAvgAggregateInputType
    _sum?: CommissionDuMoisSumAggregateInputType
    _min?: CommissionDuMoisMinAggregateInputType
    _max?: CommissionDuMoisMaxAggregateInputType
  }

  export type CommissionDuMoisGroupByOutputType = {
    id: number
    date: Date
    mom_service: $Enums.nomService
    debit: number
    montant: number
    sold: number
    _count: CommissionDuMoisCountAggregateOutputType | null
    _avg: CommissionDuMoisAvgAggregateOutputType | null
    _sum: CommissionDuMoisSumAggregateOutputType | null
    _min: CommissionDuMoisMinAggregateOutputType | null
    _max: CommissionDuMoisMaxAggregateOutputType | null
  }

  type GetCommissionDuMoisGroupByPayload<T extends commissionDuMoisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommissionDuMoisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommissionDuMoisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommissionDuMoisGroupByOutputType[P]>
            : GetScalarType<T[P], CommissionDuMoisGroupByOutputType[P]>
        }
      >
    >


  export type commissionDuMoisSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    mom_service?: boolean
    debit?: boolean
    montant?: boolean
    sold?: boolean
  }, ExtArgs["result"]["commissionDuMois"]>


  export type commissionDuMoisSelectScalar = {
    id?: boolean
    date?: boolean
    mom_service?: boolean
    debit?: boolean
    montant?: boolean
    sold?: boolean
  }


  export type $commissionDuMoisPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "commissionDuMois"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      mom_service: $Enums.nomService
      debit: number
      montant: number
      sold: number
    }, ExtArgs["result"]["commissionDuMois"]>
    composites: {}
  }

  type commissionDuMoisGetPayload<S extends boolean | null | undefined | commissionDuMoisDefaultArgs> = $Result.GetResult<Prisma.$commissionDuMoisPayload, S>

  type commissionDuMoisCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<commissionDuMoisFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommissionDuMoisCountAggregateInputType | true
    }

  export interface commissionDuMoisDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['commissionDuMois'], meta: { name: 'commissionDuMois' } }
    /**
     * Find zero or one CommissionDuMois that matches the filter.
     * @param {commissionDuMoisFindUniqueArgs} args - Arguments to find a CommissionDuMois
     * @example
     * // Get one CommissionDuMois
     * const commissionDuMois = await prisma.commissionDuMois.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends commissionDuMoisFindUniqueArgs>(args: SelectSubset<T, commissionDuMoisFindUniqueArgs<ExtArgs>>): Prisma__commissionDuMoisClient<$Result.GetResult<Prisma.$commissionDuMoisPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CommissionDuMois that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {commissionDuMoisFindUniqueOrThrowArgs} args - Arguments to find a CommissionDuMois
     * @example
     * // Get one CommissionDuMois
     * const commissionDuMois = await prisma.commissionDuMois.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends commissionDuMoisFindUniqueOrThrowArgs>(args: SelectSubset<T, commissionDuMoisFindUniqueOrThrowArgs<ExtArgs>>): Prisma__commissionDuMoisClient<$Result.GetResult<Prisma.$commissionDuMoisPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CommissionDuMois that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commissionDuMoisFindFirstArgs} args - Arguments to find a CommissionDuMois
     * @example
     * // Get one CommissionDuMois
     * const commissionDuMois = await prisma.commissionDuMois.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends commissionDuMoisFindFirstArgs>(args?: SelectSubset<T, commissionDuMoisFindFirstArgs<ExtArgs>>): Prisma__commissionDuMoisClient<$Result.GetResult<Prisma.$commissionDuMoisPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CommissionDuMois that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commissionDuMoisFindFirstOrThrowArgs} args - Arguments to find a CommissionDuMois
     * @example
     * // Get one CommissionDuMois
     * const commissionDuMois = await prisma.commissionDuMois.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends commissionDuMoisFindFirstOrThrowArgs>(args?: SelectSubset<T, commissionDuMoisFindFirstOrThrowArgs<ExtArgs>>): Prisma__commissionDuMoisClient<$Result.GetResult<Prisma.$commissionDuMoisPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CommissionDuMois that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commissionDuMoisFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CommissionDuMois
     * const commissionDuMois = await prisma.commissionDuMois.findMany()
     * 
     * // Get first 10 CommissionDuMois
     * const commissionDuMois = await prisma.commissionDuMois.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commissionDuMoisWithIdOnly = await prisma.commissionDuMois.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends commissionDuMoisFindManyArgs>(args?: SelectSubset<T, commissionDuMoisFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commissionDuMoisPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CommissionDuMois.
     * @param {commissionDuMoisCreateArgs} args - Arguments to create a CommissionDuMois.
     * @example
     * // Create one CommissionDuMois
     * const CommissionDuMois = await prisma.commissionDuMois.create({
     *   data: {
     *     // ... data to create a CommissionDuMois
     *   }
     * })
     * 
     */
    create<T extends commissionDuMoisCreateArgs>(args: SelectSubset<T, commissionDuMoisCreateArgs<ExtArgs>>): Prisma__commissionDuMoisClient<$Result.GetResult<Prisma.$commissionDuMoisPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CommissionDuMois.
     * @param {commissionDuMoisCreateManyArgs} args - Arguments to create many CommissionDuMois.
     * @example
     * // Create many CommissionDuMois
     * const commissionDuMois = await prisma.commissionDuMois.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends commissionDuMoisCreateManyArgs>(args?: SelectSubset<T, commissionDuMoisCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CommissionDuMois.
     * @param {commissionDuMoisDeleteArgs} args - Arguments to delete one CommissionDuMois.
     * @example
     * // Delete one CommissionDuMois
     * const CommissionDuMois = await prisma.commissionDuMois.delete({
     *   where: {
     *     // ... filter to delete one CommissionDuMois
     *   }
     * })
     * 
     */
    delete<T extends commissionDuMoisDeleteArgs>(args: SelectSubset<T, commissionDuMoisDeleteArgs<ExtArgs>>): Prisma__commissionDuMoisClient<$Result.GetResult<Prisma.$commissionDuMoisPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CommissionDuMois.
     * @param {commissionDuMoisUpdateArgs} args - Arguments to update one CommissionDuMois.
     * @example
     * // Update one CommissionDuMois
     * const commissionDuMois = await prisma.commissionDuMois.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends commissionDuMoisUpdateArgs>(args: SelectSubset<T, commissionDuMoisUpdateArgs<ExtArgs>>): Prisma__commissionDuMoisClient<$Result.GetResult<Prisma.$commissionDuMoisPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CommissionDuMois.
     * @param {commissionDuMoisDeleteManyArgs} args - Arguments to filter CommissionDuMois to delete.
     * @example
     * // Delete a few CommissionDuMois
     * const { count } = await prisma.commissionDuMois.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends commissionDuMoisDeleteManyArgs>(args?: SelectSubset<T, commissionDuMoisDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommissionDuMois.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commissionDuMoisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CommissionDuMois
     * const commissionDuMois = await prisma.commissionDuMois.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends commissionDuMoisUpdateManyArgs>(args: SelectSubset<T, commissionDuMoisUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CommissionDuMois.
     * @param {commissionDuMoisUpsertArgs} args - Arguments to update or create a CommissionDuMois.
     * @example
     * // Update or create a CommissionDuMois
     * const commissionDuMois = await prisma.commissionDuMois.upsert({
     *   create: {
     *     // ... data to create a CommissionDuMois
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CommissionDuMois we want to update
     *   }
     * })
     */
    upsert<T extends commissionDuMoisUpsertArgs>(args: SelectSubset<T, commissionDuMoisUpsertArgs<ExtArgs>>): Prisma__commissionDuMoisClient<$Result.GetResult<Prisma.$commissionDuMoisPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CommissionDuMois.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commissionDuMoisCountArgs} args - Arguments to filter CommissionDuMois to count.
     * @example
     * // Count the number of CommissionDuMois
     * const count = await prisma.commissionDuMois.count({
     *   where: {
     *     // ... the filter for the CommissionDuMois we want to count
     *   }
     * })
    **/
    count<T extends commissionDuMoisCountArgs>(
      args?: Subset<T, commissionDuMoisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommissionDuMoisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CommissionDuMois.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommissionDuMoisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommissionDuMoisAggregateArgs>(args: Subset<T, CommissionDuMoisAggregateArgs>): Prisma.PrismaPromise<GetCommissionDuMoisAggregateType<T>>

    /**
     * Group by CommissionDuMois.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commissionDuMoisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends commissionDuMoisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: commissionDuMoisGroupByArgs['orderBy'] }
        : { orderBy?: commissionDuMoisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, commissionDuMoisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommissionDuMoisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the commissionDuMois model
   */
  readonly fields: commissionDuMoisFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for commissionDuMois.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__commissionDuMoisClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the commissionDuMois model
   */ 
  interface commissionDuMoisFieldRefs {
    readonly id: FieldRef<"commissionDuMois", 'Int'>
    readonly date: FieldRef<"commissionDuMois", 'DateTime'>
    readonly mom_service: FieldRef<"commissionDuMois", 'nomService'>
    readonly debit: FieldRef<"commissionDuMois", 'Int'>
    readonly montant: FieldRef<"commissionDuMois", 'Int'>
    readonly sold: FieldRef<"commissionDuMois", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * commissionDuMois findUnique
   */
  export type commissionDuMoisFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commissionDuMois
     */
    select?: commissionDuMoisSelect<ExtArgs> | null
    /**
     * Filter, which commissionDuMois to fetch.
     */
    where: commissionDuMoisWhereUniqueInput
  }

  /**
   * commissionDuMois findUniqueOrThrow
   */
  export type commissionDuMoisFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commissionDuMois
     */
    select?: commissionDuMoisSelect<ExtArgs> | null
    /**
     * Filter, which commissionDuMois to fetch.
     */
    where: commissionDuMoisWhereUniqueInput
  }

  /**
   * commissionDuMois findFirst
   */
  export type commissionDuMoisFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commissionDuMois
     */
    select?: commissionDuMoisSelect<ExtArgs> | null
    /**
     * Filter, which commissionDuMois to fetch.
     */
    where?: commissionDuMoisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commissionDuMois to fetch.
     */
    orderBy?: commissionDuMoisOrderByWithRelationInput | commissionDuMoisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for commissionDuMois.
     */
    cursor?: commissionDuMoisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commissionDuMois from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commissionDuMois.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of commissionDuMois.
     */
    distinct?: CommissionDuMoisScalarFieldEnum | CommissionDuMoisScalarFieldEnum[]
  }

  /**
   * commissionDuMois findFirstOrThrow
   */
  export type commissionDuMoisFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commissionDuMois
     */
    select?: commissionDuMoisSelect<ExtArgs> | null
    /**
     * Filter, which commissionDuMois to fetch.
     */
    where?: commissionDuMoisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commissionDuMois to fetch.
     */
    orderBy?: commissionDuMoisOrderByWithRelationInput | commissionDuMoisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for commissionDuMois.
     */
    cursor?: commissionDuMoisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commissionDuMois from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commissionDuMois.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of commissionDuMois.
     */
    distinct?: CommissionDuMoisScalarFieldEnum | CommissionDuMoisScalarFieldEnum[]
  }

  /**
   * commissionDuMois findMany
   */
  export type commissionDuMoisFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commissionDuMois
     */
    select?: commissionDuMoisSelect<ExtArgs> | null
    /**
     * Filter, which commissionDuMois to fetch.
     */
    where?: commissionDuMoisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commissionDuMois to fetch.
     */
    orderBy?: commissionDuMoisOrderByWithRelationInput | commissionDuMoisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing commissionDuMois.
     */
    cursor?: commissionDuMoisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commissionDuMois from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commissionDuMois.
     */
    skip?: number
    distinct?: CommissionDuMoisScalarFieldEnum | CommissionDuMoisScalarFieldEnum[]
  }

  /**
   * commissionDuMois create
   */
  export type commissionDuMoisCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commissionDuMois
     */
    select?: commissionDuMoisSelect<ExtArgs> | null
    /**
     * The data needed to create a commissionDuMois.
     */
    data: XOR<commissionDuMoisCreateInput, commissionDuMoisUncheckedCreateInput>
  }

  /**
   * commissionDuMois createMany
   */
  export type commissionDuMoisCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many commissionDuMois.
     */
    data: commissionDuMoisCreateManyInput | commissionDuMoisCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * commissionDuMois update
   */
  export type commissionDuMoisUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commissionDuMois
     */
    select?: commissionDuMoisSelect<ExtArgs> | null
    /**
     * The data needed to update a commissionDuMois.
     */
    data: XOR<commissionDuMoisUpdateInput, commissionDuMoisUncheckedUpdateInput>
    /**
     * Choose, which commissionDuMois to update.
     */
    where: commissionDuMoisWhereUniqueInput
  }

  /**
   * commissionDuMois updateMany
   */
  export type commissionDuMoisUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update commissionDuMois.
     */
    data: XOR<commissionDuMoisUpdateManyMutationInput, commissionDuMoisUncheckedUpdateManyInput>
    /**
     * Filter which commissionDuMois to update
     */
    where?: commissionDuMoisWhereInput
  }

  /**
   * commissionDuMois upsert
   */
  export type commissionDuMoisUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commissionDuMois
     */
    select?: commissionDuMoisSelect<ExtArgs> | null
    /**
     * The filter to search for the commissionDuMois to update in case it exists.
     */
    where: commissionDuMoisWhereUniqueInput
    /**
     * In case the commissionDuMois found by the `where` argument doesn't exist, create a new commissionDuMois with this data.
     */
    create: XOR<commissionDuMoisCreateInput, commissionDuMoisUncheckedCreateInput>
    /**
     * In case the commissionDuMois was found with the provided `where` argument, update it with this data.
     */
    update: XOR<commissionDuMoisUpdateInput, commissionDuMoisUncheckedUpdateInput>
  }

  /**
   * commissionDuMois delete
   */
  export type commissionDuMoisDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commissionDuMois
     */
    select?: commissionDuMoisSelect<ExtArgs> | null
    /**
     * Filter which commissionDuMois to delete.
     */
    where: commissionDuMoisWhereUniqueInput
  }

  /**
   * commissionDuMois deleteMany
   */
  export type commissionDuMoisDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which commissionDuMois to delete
     */
    where?: commissionDuMoisWhereInput
  }

  /**
   * commissionDuMois without action
   */
  export type commissionDuMoisDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commissionDuMois
     */
    select?: commissionDuMoisSelect<ExtArgs> | null
  }


  /**
   * Model creditEntreprise
   */

  export type AggregateCreditEntreprise = {
    _count: CreditEntrepriseCountAggregateOutputType | null
    _avg: CreditEntrepriseAvgAggregateOutputType | null
    _sum: CreditEntrepriseSumAggregateOutputType | null
    _min: CreditEntrepriseMinAggregateOutputType | null
    _max: CreditEntrepriseMaxAggregateOutputType | null
  }

  export type CreditEntrepriseAvgAggregateOutputType = {
    id: number | null
    montant: number | null
    montant_paye: number | null
    montant_restant: number | null
    solde: number | null
  }

  export type CreditEntrepriseSumAggregateOutputType = {
    id: number | null
    montant: number | null
    montant_paye: number | null
    montant_restant: number | null
    solde: number | null
  }

  export type CreditEntrepriseMinAggregateOutputType = {
    id: number | null
    date: Date | null
    nomClient: string | null
    prenomClient: string | null
    motif: string | null
    montant: number | null
    montant_paye: number | null
    montant_restant: number | null
    solde: number | null
  }

  export type CreditEntrepriseMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    nomClient: string | null
    prenomClient: string | null
    motif: string | null
    montant: number | null
    montant_paye: number | null
    montant_restant: number | null
    solde: number | null
  }

  export type CreditEntrepriseCountAggregateOutputType = {
    id: number
    date: number
    nomClient: number
    prenomClient: number
    motif: number
    montant: number
    montant_paye: number
    montant_restant: number
    solde: number
    _all: number
  }


  export type CreditEntrepriseAvgAggregateInputType = {
    id?: true
    montant?: true
    montant_paye?: true
    montant_restant?: true
    solde?: true
  }

  export type CreditEntrepriseSumAggregateInputType = {
    id?: true
    montant?: true
    montant_paye?: true
    montant_restant?: true
    solde?: true
  }

  export type CreditEntrepriseMinAggregateInputType = {
    id?: true
    date?: true
    nomClient?: true
    prenomClient?: true
    motif?: true
    montant?: true
    montant_paye?: true
    montant_restant?: true
    solde?: true
  }

  export type CreditEntrepriseMaxAggregateInputType = {
    id?: true
    date?: true
    nomClient?: true
    prenomClient?: true
    motif?: true
    montant?: true
    montant_paye?: true
    montant_restant?: true
    solde?: true
  }

  export type CreditEntrepriseCountAggregateInputType = {
    id?: true
    date?: true
    nomClient?: true
    prenomClient?: true
    motif?: true
    montant?: true
    montant_paye?: true
    montant_restant?: true
    solde?: true
    _all?: true
  }

  export type CreditEntrepriseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which creditEntreprise to aggregate.
     */
    where?: creditEntrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of creditEntreprises to fetch.
     */
    orderBy?: creditEntrepriseOrderByWithRelationInput | creditEntrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: creditEntrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` creditEntreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` creditEntreprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned creditEntreprises
    **/
    _count?: true | CreditEntrepriseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CreditEntrepriseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CreditEntrepriseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CreditEntrepriseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CreditEntrepriseMaxAggregateInputType
  }

  export type GetCreditEntrepriseAggregateType<T extends CreditEntrepriseAggregateArgs> = {
        [P in keyof T & keyof AggregateCreditEntreprise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCreditEntreprise[P]>
      : GetScalarType<T[P], AggregateCreditEntreprise[P]>
  }




  export type creditEntrepriseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: creditEntrepriseWhereInput
    orderBy?: creditEntrepriseOrderByWithAggregationInput | creditEntrepriseOrderByWithAggregationInput[]
    by: CreditEntrepriseScalarFieldEnum[] | CreditEntrepriseScalarFieldEnum
    having?: creditEntrepriseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CreditEntrepriseCountAggregateInputType | true
    _avg?: CreditEntrepriseAvgAggregateInputType
    _sum?: CreditEntrepriseSumAggregateInputType
    _min?: CreditEntrepriseMinAggregateInputType
    _max?: CreditEntrepriseMaxAggregateInputType
  }

  export type CreditEntrepriseGroupByOutputType = {
    id: number
    date: Date
    nomClient: string
    prenomClient: string
    motif: string
    montant: number
    montant_paye: number
    montant_restant: number
    solde: number
    _count: CreditEntrepriseCountAggregateOutputType | null
    _avg: CreditEntrepriseAvgAggregateOutputType | null
    _sum: CreditEntrepriseSumAggregateOutputType | null
    _min: CreditEntrepriseMinAggregateOutputType | null
    _max: CreditEntrepriseMaxAggregateOutputType | null
  }

  type GetCreditEntrepriseGroupByPayload<T extends creditEntrepriseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CreditEntrepriseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CreditEntrepriseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CreditEntrepriseGroupByOutputType[P]>
            : GetScalarType<T[P], CreditEntrepriseGroupByOutputType[P]>
        }
      >
    >


  export type creditEntrepriseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    nomClient?: boolean
    prenomClient?: boolean
    motif?: boolean
    montant?: boolean
    montant_paye?: boolean
    montant_restant?: boolean
    solde?: boolean
  }, ExtArgs["result"]["creditEntreprise"]>


  export type creditEntrepriseSelectScalar = {
    id?: boolean
    date?: boolean
    nomClient?: boolean
    prenomClient?: boolean
    motif?: boolean
    montant?: boolean
    montant_paye?: boolean
    montant_restant?: boolean
    solde?: boolean
  }


  export type $creditEntreprisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "creditEntreprise"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      nomClient: string
      prenomClient: string
      motif: string
      montant: number
      montant_paye: number
      montant_restant: number
      solde: number
    }, ExtArgs["result"]["creditEntreprise"]>
    composites: {}
  }

  type creditEntrepriseGetPayload<S extends boolean | null | undefined | creditEntrepriseDefaultArgs> = $Result.GetResult<Prisma.$creditEntreprisePayload, S>

  type creditEntrepriseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<creditEntrepriseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CreditEntrepriseCountAggregateInputType | true
    }

  export interface creditEntrepriseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['creditEntreprise'], meta: { name: 'creditEntreprise' } }
    /**
     * Find zero or one CreditEntreprise that matches the filter.
     * @param {creditEntrepriseFindUniqueArgs} args - Arguments to find a CreditEntreprise
     * @example
     * // Get one CreditEntreprise
     * const creditEntreprise = await prisma.creditEntreprise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends creditEntrepriseFindUniqueArgs>(args: SelectSubset<T, creditEntrepriseFindUniqueArgs<ExtArgs>>): Prisma__creditEntrepriseClient<$Result.GetResult<Prisma.$creditEntreprisePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CreditEntreprise that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {creditEntrepriseFindUniqueOrThrowArgs} args - Arguments to find a CreditEntreprise
     * @example
     * // Get one CreditEntreprise
     * const creditEntreprise = await prisma.creditEntreprise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends creditEntrepriseFindUniqueOrThrowArgs>(args: SelectSubset<T, creditEntrepriseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__creditEntrepriseClient<$Result.GetResult<Prisma.$creditEntreprisePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CreditEntreprise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {creditEntrepriseFindFirstArgs} args - Arguments to find a CreditEntreprise
     * @example
     * // Get one CreditEntreprise
     * const creditEntreprise = await prisma.creditEntreprise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends creditEntrepriseFindFirstArgs>(args?: SelectSubset<T, creditEntrepriseFindFirstArgs<ExtArgs>>): Prisma__creditEntrepriseClient<$Result.GetResult<Prisma.$creditEntreprisePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CreditEntreprise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {creditEntrepriseFindFirstOrThrowArgs} args - Arguments to find a CreditEntreprise
     * @example
     * // Get one CreditEntreprise
     * const creditEntreprise = await prisma.creditEntreprise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends creditEntrepriseFindFirstOrThrowArgs>(args?: SelectSubset<T, creditEntrepriseFindFirstOrThrowArgs<ExtArgs>>): Prisma__creditEntrepriseClient<$Result.GetResult<Prisma.$creditEntreprisePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CreditEntreprises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {creditEntrepriseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CreditEntreprises
     * const creditEntreprises = await prisma.creditEntreprise.findMany()
     * 
     * // Get first 10 CreditEntreprises
     * const creditEntreprises = await prisma.creditEntreprise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const creditEntrepriseWithIdOnly = await prisma.creditEntreprise.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends creditEntrepriseFindManyArgs>(args?: SelectSubset<T, creditEntrepriseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$creditEntreprisePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CreditEntreprise.
     * @param {creditEntrepriseCreateArgs} args - Arguments to create a CreditEntreprise.
     * @example
     * // Create one CreditEntreprise
     * const CreditEntreprise = await prisma.creditEntreprise.create({
     *   data: {
     *     // ... data to create a CreditEntreprise
     *   }
     * })
     * 
     */
    create<T extends creditEntrepriseCreateArgs>(args: SelectSubset<T, creditEntrepriseCreateArgs<ExtArgs>>): Prisma__creditEntrepriseClient<$Result.GetResult<Prisma.$creditEntreprisePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CreditEntreprises.
     * @param {creditEntrepriseCreateManyArgs} args - Arguments to create many CreditEntreprises.
     * @example
     * // Create many CreditEntreprises
     * const creditEntreprise = await prisma.creditEntreprise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends creditEntrepriseCreateManyArgs>(args?: SelectSubset<T, creditEntrepriseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CreditEntreprise.
     * @param {creditEntrepriseDeleteArgs} args - Arguments to delete one CreditEntreprise.
     * @example
     * // Delete one CreditEntreprise
     * const CreditEntreprise = await prisma.creditEntreprise.delete({
     *   where: {
     *     // ... filter to delete one CreditEntreprise
     *   }
     * })
     * 
     */
    delete<T extends creditEntrepriseDeleteArgs>(args: SelectSubset<T, creditEntrepriseDeleteArgs<ExtArgs>>): Prisma__creditEntrepriseClient<$Result.GetResult<Prisma.$creditEntreprisePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CreditEntreprise.
     * @param {creditEntrepriseUpdateArgs} args - Arguments to update one CreditEntreprise.
     * @example
     * // Update one CreditEntreprise
     * const creditEntreprise = await prisma.creditEntreprise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends creditEntrepriseUpdateArgs>(args: SelectSubset<T, creditEntrepriseUpdateArgs<ExtArgs>>): Prisma__creditEntrepriseClient<$Result.GetResult<Prisma.$creditEntreprisePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CreditEntreprises.
     * @param {creditEntrepriseDeleteManyArgs} args - Arguments to filter CreditEntreprises to delete.
     * @example
     * // Delete a few CreditEntreprises
     * const { count } = await prisma.creditEntreprise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends creditEntrepriseDeleteManyArgs>(args?: SelectSubset<T, creditEntrepriseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CreditEntreprises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {creditEntrepriseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CreditEntreprises
     * const creditEntreprise = await prisma.creditEntreprise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends creditEntrepriseUpdateManyArgs>(args: SelectSubset<T, creditEntrepriseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CreditEntreprise.
     * @param {creditEntrepriseUpsertArgs} args - Arguments to update or create a CreditEntreprise.
     * @example
     * // Update or create a CreditEntreprise
     * const creditEntreprise = await prisma.creditEntreprise.upsert({
     *   create: {
     *     // ... data to create a CreditEntreprise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CreditEntreprise we want to update
     *   }
     * })
     */
    upsert<T extends creditEntrepriseUpsertArgs>(args: SelectSubset<T, creditEntrepriseUpsertArgs<ExtArgs>>): Prisma__creditEntrepriseClient<$Result.GetResult<Prisma.$creditEntreprisePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CreditEntreprises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {creditEntrepriseCountArgs} args - Arguments to filter CreditEntreprises to count.
     * @example
     * // Count the number of CreditEntreprises
     * const count = await prisma.creditEntreprise.count({
     *   where: {
     *     // ... the filter for the CreditEntreprises we want to count
     *   }
     * })
    **/
    count<T extends creditEntrepriseCountArgs>(
      args?: Subset<T, creditEntrepriseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CreditEntrepriseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CreditEntreprise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditEntrepriseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CreditEntrepriseAggregateArgs>(args: Subset<T, CreditEntrepriseAggregateArgs>): Prisma.PrismaPromise<GetCreditEntrepriseAggregateType<T>>

    /**
     * Group by CreditEntreprise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {creditEntrepriseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends creditEntrepriseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: creditEntrepriseGroupByArgs['orderBy'] }
        : { orderBy?: creditEntrepriseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, creditEntrepriseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCreditEntrepriseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the creditEntreprise model
   */
  readonly fields: creditEntrepriseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for creditEntreprise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__creditEntrepriseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the creditEntreprise model
   */ 
  interface creditEntrepriseFieldRefs {
    readonly id: FieldRef<"creditEntreprise", 'Int'>
    readonly date: FieldRef<"creditEntreprise", 'DateTime'>
    readonly nomClient: FieldRef<"creditEntreprise", 'String'>
    readonly prenomClient: FieldRef<"creditEntreprise", 'String'>
    readonly motif: FieldRef<"creditEntreprise", 'String'>
    readonly montant: FieldRef<"creditEntreprise", 'Int'>
    readonly montant_paye: FieldRef<"creditEntreprise", 'Int'>
    readonly montant_restant: FieldRef<"creditEntreprise", 'Int'>
    readonly solde: FieldRef<"creditEntreprise", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * creditEntreprise findUnique
   */
  export type creditEntrepriseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the creditEntreprise
     */
    select?: creditEntrepriseSelect<ExtArgs> | null
    /**
     * Filter, which creditEntreprise to fetch.
     */
    where: creditEntrepriseWhereUniqueInput
  }

  /**
   * creditEntreprise findUniqueOrThrow
   */
  export type creditEntrepriseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the creditEntreprise
     */
    select?: creditEntrepriseSelect<ExtArgs> | null
    /**
     * Filter, which creditEntreprise to fetch.
     */
    where: creditEntrepriseWhereUniqueInput
  }

  /**
   * creditEntreprise findFirst
   */
  export type creditEntrepriseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the creditEntreprise
     */
    select?: creditEntrepriseSelect<ExtArgs> | null
    /**
     * Filter, which creditEntreprise to fetch.
     */
    where?: creditEntrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of creditEntreprises to fetch.
     */
    orderBy?: creditEntrepriseOrderByWithRelationInput | creditEntrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for creditEntreprises.
     */
    cursor?: creditEntrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` creditEntreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` creditEntreprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of creditEntreprises.
     */
    distinct?: CreditEntrepriseScalarFieldEnum | CreditEntrepriseScalarFieldEnum[]
  }

  /**
   * creditEntreprise findFirstOrThrow
   */
  export type creditEntrepriseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the creditEntreprise
     */
    select?: creditEntrepriseSelect<ExtArgs> | null
    /**
     * Filter, which creditEntreprise to fetch.
     */
    where?: creditEntrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of creditEntreprises to fetch.
     */
    orderBy?: creditEntrepriseOrderByWithRelationInput | creditEntrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for creditEntreprises.
     */
    cursor?: creditEntrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` creditEntreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` creditEntreprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of creditEntreprises.
     */
    distinct?: CreditEntrepriseScalarFieldEnum | CreditEntrepriseScalarFieldEnum[]
  }

  /**
   * creditEntreprise findMany
   */
  export type creditEntrepriseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the creditEntreprise
     */
    select?: creditEntrepriseSelect<ExtArgs> | null
    /**
     * Filter, which creditEntreprises to fetch.
     */
    where?: creditEntrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of creditEntreprises to fetch.
     */
    orderBy?: creditEntrepriseOrderByWithRelationInput | creditEntrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing creditEntreprises.
     */
    cursor?: creditEntrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` creditEntreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` creditEntreprises.
     */
    skip?: number
    distinct?: CreditEntrepriseScalarFieldEnum | CreditEntrepriseScalarFieldEnum[]
  }

  /**
   * creditEntreprise create
   */
  export type creditEntrepriseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the creditEntreprise
     */
    select?: creditEntrepriseSelect<ExtArgs> | null
    /**
     * The data needed to create a creditEntreprise.
     */
    data: XOR<creditEntrepriseCreateInput, creditEntrepriseUncheckedCreateInput>
  }

  /**
   * creditEntreprise createMany
   */
  export type creditEntrepriseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many creditEntreprises.
     */
    data: creditEntrepriseCreateManyInput | creditEntrepriseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * creditEntreprise update
   */
  export type creditEntrepriseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the creditEntreprise
     */
    select?: creditEntrepriseSelect<ExtArgs> | null
    /**
     * The data needed to update a creditEntreprise.
     */
    data: XOR<creditEntrepriseUpdateInput, creditEntrepriseUncheckedUpdateInput>
    /**
     * Choose, which creditEntreprise to update.
     */
    where: creditEntrepriseWhereUniqueInput
  }

  /**
   * creditEntreprise updateMany
   */
  export type creditEntrepriseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update creditEntreprises.
     */
    data: XOR<creditEntrepriseUpdateManyMutationInput, creditEntrepriseUncheckedUpdateManyInput>
    /**
     * Filter which creditEntreprises to update
     */
    where?: creditEntrepriseWhereInput
  }

  /**
   * creditEntreprise upsert
   */
  export type creditEntrepriseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the creditEntreprise
     */
    select?: creditEntrepriseSelect<ExtArgs> | null
    /**
     * The filter to search for the creditEntreprise to update in case it exists.
     */
    where: creditEntrepriseWhereUniqueInput
    /**
     * In case the creditEntreprise found by the `where` argument doesn't exist, create a new creditEntreprise with this data.
     */
    create: XOR<creditEntrepriseCreateInput, creditEntrepriseUncheckedCreateInput>
    /**
     * In case the creditEntreprise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<creditEntrepriseUpdateInput, creditEntrepriseUncheckedUpdateInput>
  }

  /**
   * creditEntreprise delete
   */
  export type creditEntrepriseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the creditEntreprise
     */
    select?: creditEntrepriseSelect<ExtArgs> | null
    /**
     * Filter which creditEntreprise to delete.
     */
    where: creditEntrepriseWhereUniqueInput
  }

  /**
   * creditEntreprise deleteMany
   */
  export type creditEntrepriseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which creditEntreprises to delete
     */
    where?: creditEntrepriseWhereInput
  }

  /**
   * creditEntreprise without action
   */
  export type creditEntrepriseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the creditEntreprise
     */
    select?: creditEntrepriseSelect<ExtArgs> | null
  }


  /**
   * Model prepayee
   */

  export type AggregatePrepayee = {
    _count: PrepayeeCountAggregateOutputType | null
    _avg: PrepayeeAvgAggregateOutputType | null
    _sum: PrepayeeSumAggregateOutputType | null
    _min: PrepayeeMinAggregateOutputType | null
    _max: PrepayeeMaxAggregateOutputType | null
  }

  export type PrepayeeAvgAggregateOutputType = {
    id: number | null
    montant_initial: number | null
    montant_depense: number | null
    montant_restant: number | null
  }

  export type PrepayeeSumAggregateOutputType = {
    id: number | null
    montant_initial: number | null
    montant_depense: number | null
    montant_restant: number | null
  }

  export type PrepayeeMinAggregateOutputType = {
    id: number | null
    date: Date | null
    nom_client: string | null
    montant_initial: number | null
    montant_depense: number | null
    montant_restant: number | null
  }

  export type PrepayeeMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    nom_client: string | null
    montant_initial: number | null
    montant_depense: number | null
    montant_restant: number | null
  }

  export type PrepayeeCountAggregateOutputType = {
    id: number
    date: number
    nom_client: number
    montant_initial: number
    montant_depense: number
    montant_restant: number
    _all: number
  }


  export type PrepayeeAvgAggregateInputType = {
    id?: true
    montant_initial?: true
    montant_depense?: true
    montant_restant?: true
  }

  export type PrepayeeSumAggregateInputType = {
    id?: true
    montant_initial?: true
    montant_depense?: true
    montant_restant?: true
  }

  export type PrepayeeMinAggregateInputType = {
    id?: true
    date?: true
    nom_client?: true
    montant_initial?: true
    montant_depense?: true
    montant_restant?: true
  }

  export type PrepayeeMaxAggregateInputType = {
    id?: true
    date?: true
    nom_client?: true
    montant_initial?: true
    montant_depense?: true
    montant_restant?: true
  }

  export type PrepayeeCountAggregateInputType = {
    id?: true
    date?: true
    nom_client?: true
    montant_initial?: true
    montant_depense?: true
    montant_restant?: true
    _all?: true
  }

  export type PrepayeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which prepayee to aggregate.
     */
    where?: prepayeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of prepayees to fetch.
     */
    orderBy?: prepayeeOrderByWithRelationInput | prepayeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: prepayeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` prepayees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` prepayees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned prepayees
    **/
    _count?: true | PrepayeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PrepayeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PrepayeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrepayeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrepayeeMaxAggregateInputType
  }

  export type GetPrepayeeAggregateType<T extends PrepayeeAggregateArgs> = {
        [P in keyof T & keyof AggregatePrepayee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrepayee[P]>
      : GetScalarType<T[P], AggregatePrepayee[P]>
  }




  export type prepayeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: prepayeeWhereInput
    orderBy?: prepayeeOrderByWithAggregationInput | prepayeeOrderByWithAggregationInput[]
    by: PrepayeeScalarFieldEnum[] | PrepayeeScalarFieldEnum
    having?: prepayeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrepayeeCountAggregateInputType | true
    _avg?: PrepayeeAvgAggregateInputType
    _sum?: PrepayeeSumAggregateInputType
    _min?: PrepayeeMinAggregateInputType
    _max?: PrepayeeMaxAggregateInputType
  }

  export type PrepayeeGroupByOutputType = {
    id: number
    date: Date
    nom_client: string
    montant_initial: number
    montant_depense: number
    montant_restant: number
    _count: PrepayeeCountAggregateOutputType | null
    _avg: PrepayeeAvgAggregateOutputType | null
    _sum: PrepayeeSumAggregateOutputType | null
    _min: PrepayeeMinAggregateOutputType | null
    _max: PrepayeeMaxAggregateOutputType | null
  }

  type GetPrepayeeGroupByPayload<T extends prepayeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PrepayeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrepayeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrepayeeGroupByOutputType[P]>
            : GetScalarType<T[P], PrepayeeGroupByOutputType[P]>
        }
      >
    >


  export type prepayeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    nom_client?: boolean
    montant_initial?: boolean
    montant_depense?: boolean
    montant_restant?: boolean
  }, ExtArgs["result"]["prepayee"]>


  export type prepayeeSelectScalar = {
    id?: boolean
    date?: boolean
    nom_client?: boolean
    montant_initial?: boolean
    montant_depense?: boolean
    montant_restant?: boolean
  }


  export type $prepayeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "prepayee"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      nom_client: string
      montant_initial: number
      montant_depense: number
      montant_restant: number
    }, ExtArgs["result"]["prepayee"]>
    composites: {}
  }

  type prepayeeGetPayload<S extends boolean | null | undefined | prepayeeDefaultArgs> = $Result.GetResult<Prisma.$prepayeePayload, S>

  type prepayeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<prepayeeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PrepayeeCountAggregateInputType | true
    }

  export interface prepayeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['prepayee'], meta: { name: 'prepayee' } }
    /**
     * Find zero or one Prepayee that matches the filter.
     * @param {prepayeeFindUniqueArgs} args - Arguments to find a Prepayee
     * @example
     * // Get one Prepayee
     * const prepayee = await prisma.prepayee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends prepayeeFindUniqueArgs>(args: SelectSubset<T, prepayeeFindUniqueArgs<ExtArgs>>): Prisma__prepayeeClient<$Result.GetResult<Prisma.$prepayeePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Prepayee that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {prepayeeFindUniqueOrThrowArgs} args - Arguments to find a Prepayee
     * @example
     * // Get one Prepayee
     * const prepayee = await prisma.prepayee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends prepayeeFindUniqueOrThrowArgs>(args: SelectSubset<T, prepayeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__prepayeeClient<$Result.GetResult<Prisma.$prepayeePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Prepayee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prepayeeFindFirstArgs} args - Arguments to find a Prepayee
     * @example
     * // Get one Prepayee
     * const prepayee = await prisma.prepayee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends prepayeeFindFirstArgs>(args?: SelectSubset<T, prepayeeFindFirstArgs<ExtArgs>>): Prisma__prepayeeClient<$Result.GetResult<Prisma.$prepayeePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Prepayee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prepayeeFindFirstOrThrowArgs} args - Arguments to find a Prepayee
     * @example
     * // Get one Prepayee
     * const prepayee = await prisma.prepayee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends prepayeeFindFirstOrThrowArgs>(args?: SelectSubset<T, prepayeeFindFirstOrThrowArgs<ExtArgs>>): Prisma__prepayeeClient<$Result.GetResult<Prisma.$prepayeePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Prepayees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prepayeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Prepayees
     * const prepayees = await prisma.prepayee.findMany()
     * 
     * // Get first 10 Prepayees
     * const prepayees = await prisma.prepayee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const prepayeeWithIdOnly = await prisma.prepayee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends prepayeeFindManyArgs>(args?: SelectSubset<T, prepayeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$prepayeePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Prepayee.
     * @param {prepayeeCreateArgs} args - Arguments to create a Prepayee.
     * @example
     * // Create one Prepayee
     * const Prepayee = await prisma.prepayee.create({
     *   data: {
     *     // ... data to create a Prepayee
     *   }
     * })
     * 
     */
    create<T extends prepayeeCreateArgs>(args: SelectSubset<T, prepayeeCreateArgs<ExtArgs>>): Prisma__prepayeeClient<$Result.GetResult<Prisma.$prepayeePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Prepayees.
     * @param {prepayeeCreateManyArgs} args - Arguments to create many Prepayees.
     * @example
     * // Create many Prepayees
     * const prepayee = await prisma.prepayee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends prepayeeCreateManyArgs>(args?: SelectSubset<T, prepayeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Prepayee.
     * @param {prepayeeDeleteArgs} args - Arguments to delete one Prepayee.
     * @example
     * // Delete one Prepayee
     * const Prepayee = await prisma.prepayee.delete({
     *   where: {
     *     // ... filter to delete one Prepayee
     *   }
     * })
     * 
     */
    delete<T extends prepayeeDeleteArgs>(args: SelectSubset<T, prepayeeDeleteArgs<ExtArgs>>): Prisma__prepayeeClient<$Result.GetResult<Prisma.$prepayeePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Prepayee.
     * @param {prepayeeUpdateArgs} args - Arguments to update one Prepayee.
     * @example
     * // Update one Prepayee
     * const prepayee = await prisma.prepayee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends prepayeeUpdateArgs>(args: SelectSubset<T, prepayeeUpdateArgs<ExtArgs>>): Prisma__prepayeeClient<$Result.GetResult<Prisma.$prepayeePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Prepayees.
     * @param {prepayeeDeleteManyArgs} args - Arguments to filter Prepayees to delete.
     * @example
     * // Delete a few Prepayees
     * const { count } = await prisma.prepayee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends prepayeeDeleteManyArgs>(args?: SelectSubset<T, prepayeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Prepayees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prepayeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Prepayees
     * const prepayee = await prisma.prepayee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends prepayeeUpdateManyArgs>(args: SelectSubset<T, prepayeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Prepayee.
     * @param {prepayeeUpsertArgs} args - Arguments to update or create a Prepayee.
     * @example
     * // Update or create a Prepayee
     * const prepayee = await prisma.prepayee.upsert({
     *   create: {
     *     // ... data to create a Prepayee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Prepayee we want to update
     *   }
     * })
     */
    upsert<T extends prepayeeUpsertArgs>(args: SelectSubset<T, prepayeeUpsertArgs<ExtArgs>>): Prisma__prepayeeClient<$Result.GetResult<Prisma.$prepayeePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Prepayees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prepayeeCountArgs} args - Arguments to filter Prepayees to count.
     * @example
     * // Count the number of Prepayees
     * const count = await prisma.prepayee.count({
     *   where: {
     *     // ... the filter for the Prepayees we want to count
     *   }
     * })
    **/
    count<T extends prepayeeCountArgs>(
      args?: Subset<T, prepayeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrepayeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Prepayee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrepayeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrepayeeAggregateArgs>(args: Subset<T, PrepayeeAggregateArgs>): Prisma.PrismaPromise<GetPrepayeeAggregateType<T>>

    /**
     * Group by Prepayee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prepayeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends prepayeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: prepayeeGroupByArgs['orderBy'] }
        : { orderBy?: prepayeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, prepayeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrepayeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the prepayee model
   */
  readonly fields: prepayeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for prepayee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__prepayeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the prepayee model
   */ 
  interface prepayeeFieldRefs {
    readonly id: FieldRef<"prepayee", 'Int'>
    readonly date: FieldRef<"prepayee", 'DateTime'>
    readonly nom_client: FieldRef<"prepayee", 'String'>
    readonly montant_initial: FieldRef<"prepayee", 'Int'>
    readonly montant_depense: FieldRef<"prepayee", 'Int'>
    readonly montant_restant: FieldRef<"prepayee", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * prepayee findUnique
   */
  export type prepayeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prepayee
     */
    select?: prepayeeSelect<ExtArgs> | null
    /**
     * Filter, which prepayee to fetch.
     */
    where: prepayeeWhereUniqueInput
  }

  /**
   * prepayee findUniqueOrThrow
   */
  export type prepayeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prepayee
     */
    select?: prepayeeSelect<ExtArgs> | null
    /**
     * Filter, which prepayee to fetch.
     */
    where: prepayeeWhereUniqueInput
  }

  /**
   * prepayee findFirst
   */
  export type prepayeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prepayee
     */
    select?: prepayeeSelect<ExtArgs> | null
    /**
     * Filter, which prepayee to fetch.
     */
    where?: prepayeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of prepayees to fetch.
     */
    orderBy?: prepayeeOrderByWithRelationInput | prepayeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for prepayees.
     */
    cursor?: prepayeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` prepayees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` prepayees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of prepayees.
     */
    distinct?: PrepayeeScalarFieldEnum | PrepayeeScalarFieldEnum[]
  }

  /**
   * prepayee findFirstOrThrow
   */
  export type prepayeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prepayee
     */
    select?: prepayeeSelect<ExtArgs> | null
    /**
     * Filter, which prepayee to fetch.
     */
    where?: prepayeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of prepayees to fetch.
     */
    orderBy?: prepayeeOrderByWithRelationInput | prepayeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for prepayees.
     */
    cursor?: prepayeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` prepayees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` prepayees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of prepayees.
     */
    distinct?: PrepayeeScalarFieldEnum | PrepayeeScalarFieldEnum[]
  }

  /**
   * prepayee findMany
   */
  export type prepayeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prepayee
     */
    select?: prepayeeSelect<ExtArgs> | null
    /**
     * Filter, which prepayees to fetch.
     */
    where?: prepayeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of prepayees to fetch.
     */
    orderBy?: prepayeeOrderByWithRelationInput | prepayeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing prepayees.
     */
    cursor?: prepayeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` prepayees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` prepayees.
     */
    skip?: number
    distinct?: PrepayeeScalarFieldEnum | PrepayeeScalarFieldEnum[]
  }

  /**
   * prepayee create
   */
  export type prepayeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prepayee
     */
    select?: prepayeeSelect<ExtArgs> | null
    /**
     * The data needed to create a prepayee.
     */
    data: XOR<prepayeeCreateInput, prepayeeUncheckedCreateInput>
  }

  /**
   * prepayee createMany
   */
  export type prepayeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many prepayees.
     */
    data: prepayeeCreateManyInput | prepayeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * prepayee update
   */
  export type prepayeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prepayee
     */
    select?: prepayeeSelect<ExtArgs> | null
    /**
     * The data needed to update a prepayee.
     */
    data: XOR<prepayeeUpdateInput, prepayeeUncheckedUpdateInput>
    /**
     * Choose, which prepayee to update.
     */
    where: prepayeeWhereUniqueInput
  }

  /**
   * prepayee updateMany
   */
  export type prepayeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update prepayees.
     */
    data: XOR<prepayeeUpdateManyMutationInput, prepayeeUncheckedUpdateManyInput>
    /**
     * Filter which prepayees to update
     */
    where?: prepayeeWhereInput
  }

  /**
   * prepayee upsert
   */
  export type prepayeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prepayee
     */
    select?: prepayeeSelect<ExtArgs> | null
    /**
     * The filter to search for the prepayee to update in case it exists.
     */
    where: prepayeeWhereUniqueInput
    /**
     * In case the prepayee found by the `where` argument doesn't exist, create a new prepayee with this data.
     */
    create: XOR<prepayeeCreateInput, prepayeeUncheckedCreateInput>
    /**
     * In case the prepayee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<prepayeeUpdateInput, prepayeeUncheckedUpdateInput>
  }

  /**
   * prepayee delete
   */
  export type prepayeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prepayee
     */
    select?: prepayeeSelect<ExtArgs> | null
    /**
     * Filter which prepayee to delete.
     */
    where: prepayeeWhereUniqueInput
  }

  /**
   * prepayee deleteMany
   */
  export type prepayeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which prepayees to delete
     */
    where?: prepayeeWhereInput
  }

  /**
   * prepayee without action
   */
  export type prepayeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prepayee
     */
    select?: prepayeeSelect<ExtArgs> | null
  }


  /**
   * Model serviceEntreprise
   */

  export type AggregateServiceEntreprise = {
    _count: ServiceEntrepriseCountAggregateOutputType | null
    _avg: ServiceEntrepriseAvgAggregateOutputType | null
    _sum: ServiceEntrepriseSumAggregateOutputType | null
    _min: ServiceEntrepriseMinAggregateOutputType | null
    _max: ServiceEntrepriseMaxAggregateOutputType | null
  }

  export type ServiceEntrepriseAvgAggregateOutputType = {
    id: number | null
    solde_a_nouveau: number | null
    montant_final: number | null
    total: number | null
  }

  export type ServiceEntrepriseSumAggregateOutputType = {
    id: number | null
    solde_a_nouveau: number | null
    montant_final: number | null
    total: number | null
  }

  export type ServiceEntrepriseMinAggregateOutputType = {
    id: number | null
    date: Date | null
    mom_service: $Enums.nomService | null
    solde_a_nouveau: number | null
    montant_final: number | null
    total: number | null
  }

  export type ServiceEntrepriseMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    mom_service: $Enums.nomService | null
    solde_a_nouveau: number | null
    montant_final: number | null
    total: number | null
  }

  export type ServiceEntrepriseCountAggregateOutputType = {
    id: number
    date: number
    mom_service: number
    solde_a_nouveau: number
    montant_final: number
    total: number
    _all: number
  }


  export type ServiceEntrepriseAvgAggregateInputType = {
    id?: true
    solde_a_nouveau?: true
    montant_final?: true
    total?: true
  }

  export type ServiceEntrepriseSumAggregateInputType = {
    id?: true
    solde_a_nouveau?: true
    montant_final?: true
    total?: true
  }

  export type ServiceEntrepriseMinAggregateInputType = {
    id?: true
    date?: true
    mom_service?: true
    solde_a_nouveau?: true
    montant_final?: true
    total?: true
  }

  export type ServiceEntrepriseMaxAggregateInputType = {
    id?: true
    date?: true
    mom_service?: true
    solde_a_nouveau?: true
    montant_final?: true
    total?: true
  }

  export type ServiceEntrepriseCountAggregateInputType = {
    id?: true
    date?: true
    mom_service?: true
    solde_a_nouveau?: true
    montant_final?: true
    total?: true
    _all?: true
  }

  export type ServiceEntrepriseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which serviceEntreprise to aggregate.
     */
    where?: serviceEntrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of serviceEntreprises to fetch.
     */
    orderBy?: serviceEntrepriseOrderByWithRelationInput | serviceEntrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: serviceEntrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` serviceEntreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` serviceEntreprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned serviceEntreprises
    **/
    _count?: true | ServiceEntrepriseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceEntrepriseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceEntrepriseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceEntrepriseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceEntrepriseMaxAggregateInputType
  }

  export type GetServiceEntrepriseAggregateType<T extends ServiceEntrepriseAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceEntreprise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceEntreprise[P]>
      : GetScalarType<T[P], AggregateServiceEntreprise[P]>
  }




  export type serviceEntrepriseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: serviceEntrepriseWhereInput
    orderBy?: serviceEntrepriseOrderByWithAggregationInput | serviceEntrepriseOrderByWithAggregationInput[]
    by: ServiceEntrepriseScalarFieldEnum[] | ServiceEntrepriseScalarFieldEnum
    having?: serviceEntrepriseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceEntrepriseCountAggregateInputType | true
    _avg?: ServiceEntrepriseAvgAggregateInputType
    _sum?: ServiceEntrepriseSumAggregateInputType
    _min?: ServiceEntrepriseMinAggregateInputType
    _max?: ServiceEntrepriseMaxAggregateInputType
  }

  export type ServiceEntrepriseGroupByOutputType = {
    id: number
    date: Date
    mom_service: $Enums.nomService
    solde_a_nouveau: number
    montant_final: number
    total: number
    _count: ServiceEntrepriseCountAggregateOutputType | null
    _avg: ServiceEntrepriseAvgAggregateOutputType | null
    _sum: ServiceEntrepriseSumAggregateOutputType | null
    _min: ServiceEntrepriseMinAggregateOutputType | null
    _max: ServiceEntrepriseMaxAggregateOutputType | null
  }

  type GetServiceEntrepriseGroupByPayload<T extends serviceEntrepriseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceEntrepriseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceEntrepriseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceEntrepriseGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceEntrepriseGroupByOutputType[P]>
        }
      >
    >


  export type serviceEntrepriseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    mom_service?: boolean
    solde_a_nouveau?: boolean
    montant_final?: boolean
    total?: boolean
  }, ExtArgs["result"]["serviceEntreprise"]>


  export type serviceEntrepriseSelectScalar = {
    id?: boolean
    date?: boolean
    mom_service?: boolean
    solde_a_nouveau?: boolean
    montant_final?: boolean
    total?: boolean
  }


  export type $serviceEntreprisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "serviceEntreprise"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      mom_service: $Enums.nomService
      solde_a_nouveau: number
      montant_final: number
      total: number
    }, ExtArgs["result"]["serviceEntreprise"]>
    composites: {}
  }

  type serviceEntrepriseGetPayload<S extends boolean | null | undefined | serviceEntrepriseDefaultArgs> = $Result.GetResult<Prisma.$serviceEntreprisePayload, S>

  type serviceEntrepriseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<serviceEntrepriseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ServiceEntrepriseCountAggregateInputType | true
    }

  export interface serviceEntrepriseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['serviceEntreprise'], meta: { name: 'serviceEntreprise' } }
    /**
     * Find zero or one ServiceEntreprise that matches the filter.
     * @param {serviceEntrepriseFindUniqueArgs} args - Arguments to find a ServiceEntreprise
     * @example
     * // Get one ServiceEntreprise
     * const serviceEntreprise = await prisma.serviceEntreprise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends serviceEntrepriseFindUniqueArgs>(args: SelectSubset<T, serviceEntrepriseFindUniqueArgs<ExtArgs>>): Prisma__serviceEntrepriseClient<$Result.GetResult<Prisma.$serviceEntreprisePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ServiceEntreprise that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {serviceEntrepriseFindUniqueOrThrowArgs} args - Arguments to find a ServiceEntreprise
     * @example
     * // Get one ServiceEntreprise
     * const serviceEntreprise = await prisma.serviceEntreprise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends serviceEntrepriseFindUniqueOrThrowArgs>(args: SelectSubset<T, serviceEntrepriseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__serviceEntrepriseClient<$Result.GetResult<Prisma.$serviceEntreprisePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ServiceEntreprise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceEntrepriseFindFirstArgs} args - Arguments to find a ServiceEntreprise
     * @example
     * // Get one ServiceEntreprise
     * const serviceEntreprise = await prisma.serviceEntreprise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends serviceEntrepriseFindFirstArgs>(args?: SelectSubset<T, serviceEntrepriseFindFirstArgs<ExtArgs>>): Prisma__serviceEntrepriseClient<$Result.GetResult<Prisma.$serviceEntreprisePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ServiceEntreprise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceEntrepriseFindFirstOrThrowArgs} args - Arguments to find a ServiceEntreprise
     * @example
     * // Get one ServiceEntreprise
     * const serviceEntreprise = await prisma.serviceEntreprise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends serviceEntrepriseFindFirstOrThrowArgs>(args?: SelectSubset<T, serviceEntrepriseFindFirstOrThrowArgs<ExtArgs>>): Prisma__serviceEntrepriseClient<$Result.GetResult<Prisma.$serviceEntreprisePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ServiceEntreprises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceEntrepriseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceEntreprises
     * const serviceEntreprises = await prisma.serviceEntreprise.findMany()
     * 
     * // Get first 10 ServiceEntreprises
     * const serviceEntreprises = await prisma.serviceEntreprise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceEntrepriseWithIdOnly = await prisma.serviceEntreprise.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends serviceEntrepriseFindManyArgs>(args?: SelectSubset<T, serviceEntrepriseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$serviceEntreprisePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ServiceEntreprise.
     * @param {serviceEntrepriseCreateArgs} args - Arguments to create a ServiceEntreprise.
     * @example
     * // Create one ServiceEntreprise
     * const ServiceEntreprise = await prisma.serviceEntreprise.create({
     *   data: {
     *     // ... data to create a ServiceEntreprise
     *   }
     * })
     * 
     */
    create<T extends serviceEntrepriseCreateArgs>(args: SelectSubset<T, serviceEntrepriseCreateArgs<ExtArgs>>): Prisma__serviceEntrepriseClient<$Result.GetResult<Prisma.$serviceEntreprisePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ServiceEntreprises.
     * @param {serviceEntrepriseCreateManyArgs} args - Arguments to create many ServiceEntreprises.
     * @example
     * // Create many ServiceEntreprises
     * const serviceEntreprise = await prisma.serviceEntreprise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends serviceEntrepriseCreateManyArgs>(args?: SelectSubset<T, serviceEntrepriseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ServiceEntreprise.
     * @param {serviceEntrepriseDeleteArgs} args - Arguments to delete one ServiceEntreprise.
     * @example
     * // Delete one ServiceEntreprise
     * const ServiceEntreprise = await prisma.serviceEntreprise.delete({
     *   where: {
     *     // ... filter to delete one ServiceEntreprise
     *   }
     * })
     * 
     */
    delete<T extends serviceEntrepriseDeleteArgs>(args: SelectSubset<T, serviceEntrepriseDeleteArgs<ExtArgs>>): Prisma__serviceEntrepriseClient<$Result.GetResult<Prisma.$serviceEntreprisePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ServiceEntreprise.
     * @param {serviceEntrepriseUpdateArgs} args - Arguments to update one ServiceEntreprise.
     * @example
     * // Update one ServiceEntreprise
     * const serviceEntreprise = await prisma.serviceEntreprise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends serviceEntrepriseUpdateArgs>(args: SelectSubset<T, serviceEntrepriseUpdateArgs<ExtArgs>>): Prisma__serviceEntrepriseClient<$Result.GetResult<Prisma.$serviceEntreprisePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ServiceEntreprises.
     * @param {serviceEntrepriseDeleteManyArgs} args - Arguments to filter ServiceEntreprises to delete.
     * @example
     * // Delete a few ServiceEntreprises
     * const { count } = await prisma.serviceEntreprise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends serviceEntrepriseDeleteManyArgs>(args?: SelectSubset<T, serviceEntrepriseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceEntreprises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceEntrepriseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceEntreprises
     * const serviceEntreprise = await prisma.serviceEntreprise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends serviceEntrepriseUpdateManyArgs>(args: SelectSubset<T, serviceEntrepriseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ServiceEntreprise.
     * @param {serviceEntrepriseUpsertArgs} args - Arguments to update or create a ServiceEntreprise.
     * @example
     * // Update or create a ServiceEntreprise
     * const serviceEntreprise = await prisma.serviceEntreprise.upsert({
     *   create: {
     *     // ... data to create a ServiceEntreprise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceEntreprise we want to update
     *   }
     * })
     */
    upsert<T extends serviceEntrepriseUpsertArgs>(args: SelectSubset<T, serviceEntrepriseUpsertArgs<ExtArgs>>): Prisma__serviceEntrepriseClient<$Result.GetResult<Prisma.$serviceEntreprisePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ServiceEntreprises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceEntrepriseCountArgs} args - Arguments to filter ServiceEntreprises to count.
     * @example
     * // Count the number of ServiceEntreprises
     * const count = await prisma.serviceEntreprise.count({
     *   where: {
     *     // ... the filter for the ServiceEntreprises we want to count
     *   }
     * })
    **/
    count<T extends serviceEntrepriseCountArgs>(
      args?: Subset<T, serviceEntrepriseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceEntrepriseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceEntreprise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceEntrepriseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceEntrepriseAggregateArgs>(args: Subset<T, ServiceEntrepriseAggregateArgs>): Prisma.PrismaPromise<GetServiceEntrepriseAggregateType<T>>

    /**
     * Group by ServiceEntreprise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceEntrepriseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends serviceEntrepriseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: serviceEntrepriseGroupByArgs['orderBy'] }
        : { orderBy?: serviceEntrepriseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, serviceEntrepriseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceEntrepriseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the serviceEntreprise model
   */
  readonly fields: serviceEntrepriseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for serviceEntreprise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__serviceEntrepriseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the serviceEntreprise model
   */ 
  interface serviceEntrepriseFieldRefs {
    readonly id: FieldRef<"serviceEntreprise", 'Int'>
    readonly date: FieldRef<"serviceEntreprise", 'DateTime'>
    readonly mom_service: FieldRef<"serviceEntreprise", 'nomService'>
    readonly solde_a_nouveau: FieldRef<"serviceEntreprise", 'Int'>
    readonly montant_final: FieldRef<"serviceEntreprise", 'Int'>
    readonly total: FieldRef<"serviceEntreprise", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * serviceEntreprise findUnique
   */
  export type serviceEntrepriseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceEntreprise
     */
    select?: serviceEntrepriseSelect<ExtArgs> | null
    /**
     * Filter, which serviceEntreprise to fetch.
     */
    where: serviceEntrepriseWhereUniqueInput
  }

  /**
   * serviceEntreprise findUniqueOrThrow
   */
  export type serviceEntrepriseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceEntreprise
     */
    select?: serviceEntrepriseSelect<ExtArgs> | null
    /**
     * Filter, which serviceEntreprise to fetch.
     */
    where: serviceEntrepriseWhereUniqueInput
  }

  /**
   * serviceEntreprise findFirst
   */
  export type serviceEntrepriseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceEntreprise
     */
    select?: serviceEntrepriseSelect<ExtArgs> | null
    /**
     * Filter, which serviceEntreprise to fetch.
     */
    where?: serviceEntrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of serviceEntreprises to fetch.
     */
    orderBy?: serviceEntrepriseOrderByWithRelationInput | serviceEntrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for serviceEntreprises.
     */
    cursor?: serviceEntrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` serviceEntreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` serviceEntreprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of serviceEntreprises.
     */
    distinct?: ServiceEntrepriseScalarFieldEnum | ServiceEntrepriseScalarFieldEnum[]
  }

  /**
   * serviceEntreprise findFirstOrThrow
   */
  export type serviceEntrepriseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceEntreprise
     */
    select?: serviceEntrepriseSelect<ExtArgs> | null
    /**
     * Filter, which serviceEntreprise to fetch.
     */
    where?: serviceEntrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of serviceEntreprises to fetch.
     */
    orderBy?: serviceEntrepriseOrderByWithRelationInput | serviceEntrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for serviceEntreprises.
     */
    cursor?: serviceEntrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` serviceEntreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` serviceEntreprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of serviceEntreprises.
     */
    distinct?: ServiceEntrepriseScalarFieldEnum | ServiceEntrepriseScalarFieldEnum[]
  }

  /**
   * serviceEntreprise findMany
   */
  export type serviceEntrepriseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceEntreprise
     */
    select?: serviceEntrepriseSelect<ExtArgs> | null
    /**
     * Filter, which serviceEntreprises to fetch.
     */
    where?: serviceEntrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of serviceEntreprises to fetch.
     */
    orderBy?: serviceEntrepriseOrderByWithRelationInput | serviceEntrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing serviceEntreprises.
     */
    cursor?: serviceEntrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` serviceEntreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` serviceEntreprises.
     */
    skip?: number
    distinct?: ServiceEntrepriseScalarFieldEnum | ServiceEntrepriseScalarFieldEnum[]
  }

  /**
   * serviceEntreprise create
   */
  export type serviceEntrepriseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceEntreprise
     */
    select?: serviceEntrepriseSelect<ExtArgs> | null
    /**
     * The data needed to create a serviceEntreprise.
     */
    data: XOR<serviceEntrepriseCreateInput, serviceEntrepriseUncheckedCreateInput>
  }

  /**
   * serviceEntreprise createMany
   */
  export type serviceEntrepriseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many serviceEntreprises.
     */
    data: serviceEntrepriseCreateManyInput | serviceEntrepriseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * serviceEntreprise update
   */
  export type serviceEntrepriseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceEntreprise
     */
    select?: serviceEntrepriseSelect<ExtArgs> | null
    /**
     * The data needed to update a serviceEntreprise.
     */
    data: XOR<serviceEntrepriseUpdateInput, serviceEntrepriseUncheckedUpdateInput>
    /**
     * Choose, which serviceEntreprise to update.
     */
    where: serviceEntrepriseWhereUniqueInput
  }

  /**
   * serviceEntreprise updateMany
   */
  export type serviceEntrepriseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update serviceEntreprises.
     */
    data: XOR<serviceEntrepriseUpdateManyMutationInput, serviceEntrepriseUncheckedUpdateManyInput>
    /**
     * Filter which serviceEntreprises to update
     */
    where?: serviceEntrepriseWhereInput
  }

  /**
   * serviceEntreprise upsert
   */
  export type serviceEntrepriseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceEntreprise
     */
    select?: serviceEntrepriseSelect<ExtArgs> | null
    /**
     * The filter to search for the serviceEntreprise to update in case it exists.
     */
    where: serviceEntrepriseWhereUniqueInput
    /**
     * In case the serviceEntreprise found by the `where` argument doesn't exist, create a new serviceEntreprise with this data.
     */
    create: XOR<serviceEntrepriseCreateInput, serviceEntrepriseUncheckedCreateInput>
    /**
     * In case the serviceEntreprise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<serviceEntrepriseUpdateInput, serviceEntrepriseUncheckedUpdateInput>
  }

  /**
   * serviceEntreprise delete
   */
  export type serviceEntrepriseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceEntreprise
     */
    select?: serviceEntrepriseSelect<ExtArgs> | null
    /**
     * Filter which serviceEntreprise to delete.
     */
    where: serviceEntrepriseWhereUniqueInput
  }

  /**
   * serviceEntreprise deleteMany
   */
  export type serviceEntrepriseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which serviceEntreprises to delete
     */
    where?: serviceEntrepriseWhereInput
  }

  /**
   * serviceEntreprise without action
   */
  export type serviceEntrepriseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceEntreprise
     */
    select?: serviceEntrepriseSelect<ExtArgs> | null
  }


  /**
   * Model transInternation
   */

  export type AggregateTransInternation = {
    _count: TransInternationCountAggregateOutputType | null
    _avg: TransInternationAvgAggregateOutputType | null
    _sum: TransInternationSumAggregateOutputType | null
    _min: TransInternationMinAggregateOutputType | null
    _max: TransInternationMaxAggregateOutputType | null
  }

  export type TransInternationAvgAggregateOutputType = {
    id: number | null
    montant_initial: number | null
    montant_trans: number | null
    montant_recus: number | null
    soldes: number | null
    Decouvert: number | null
    crediut: number | null
    debit_caisse: number | null
    debit_BNDA: number | null
  }

  export type TransInternationSumAggregateOutputType = {
    id: number | null
    montant_initial: number | null
    montant_trans: number | null
    montant_recus: number | null
    soldes: number | null
    Decouvert: number | null
    crediut: number | null
    debit_caisse: number | null
    debit_BNDA: number | null
  }

  export type TransInternationMinAggregateOutputType = {
    id: number | null
    montant_initial: number | null
    nom_service: $Enums.transInter | null
    montant_trans: number | null
    montant_recus: number | null
    date_debut: Date | null
    date_fin: Date | null
    soldes: number | null
    Decouvert: number | null
    crediut: number | null
    debit_caisse: number | null
    debit_BNDA: number | null
  }

  export type TransInternationMaxAggregateOutputType = {
    id: number | null
    montant_initial: number | null
    nom_service: $Enums.transInter | null
    montant_trans: number | null
    montant_recus: number | null
    date_debut: Date | null
    date_fin: Date | null
    soldes: number | null
    Decouvert: number | null
    crediut: number | null
    debit_caisse: number | null
    debit_BNDA: number | null
  }

  export type TransInternationCountAggregateOutputType = {
    id: number
    montant_initial: number
    nom_service: number
    montant_trans: number
    montant_recus: number
    date_debut: number
    date_fin: number
    soldes: number
    Decouvert: number
    crediut: number
    debit_caisse: number
    debit_BNDA: number
    _all: number
  }


  export type TransInternationAvgAggregateInputType = {
    id?: true
    montant_initial?: true
    montant_trans?: true
    montant_recus?: true
    soldes?: true
    Decouvert?: true
    crediut?: true
    debit_caisse?: true
    debit_BNDA?: true
  }

  export type TransInternationSumAggregateInputType = {
    id?: true
    montant_initial?: true
    montant_trans?: true
    montant_recus?: true
    soldes?: true
    Decouvert?: true
    crediut?: true
    debit_caisse?: true
    debit_BNDA?: true
  }

  export type TransInternationMinAggregateInputType = {
    id?: true
    montant_initial?: true
    nom_service?: true
    montant_trans?: true
    montant_recus?: true
    date_debut?: true
    date_fin?: true
    soldes?: true
    Decouvert?: true
    crediut?: true
    debit_caisse?: true
    debit_BNDA?: true
  }

  export type TransInternationMaxAggregateInputType = {
    id?: true
    montant_initial?: true
    nom_service?: true
    montant_trans?: true
    montant_recus?: true
    date_debut?: true
    date_fin?: true
    soldes?: true
    Decouvert?: true
    crediut?: true
    debit_caisse?: true
    debit_BNDA?: true
  }

  export type TransInternationCountAggregateInputType = {
    id?: true
    montant_initial?: true
    nom_service?: true
    montant_trans?: true
    montant_recus?: true
    date_debut?: true
    date_fin?: true
    soldes?: true
    Decouvert?: true
    crediut?: true
    debit_caisse?: true
    debit_BNDA?: true
    _all?: true
  }

  export type TransInternationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transInternation to aggregate.
     */
    where?: transInternationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transInternations to fetch.
     */
    orderBy?: transInternationOrderByWithRelationInput | transInternationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: transInternationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transInternations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transInternations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned transInternations
    **/
    _count?: true | TransInternationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransInternationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransInternationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransInternationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransInternationMaxAggregateInputType
  }

  export type GetTransInternationAggregateType<T extends TransInternationAggregateArgs> = {
        [P in keyof T & keyof AggregateTransInternation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransInternation[P]>
      : GetScalarType<T[P], AggregateTransInternation[P]>
  }




  export type transInternationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transInternationWhereInput
    orderBy?: transInternationOrderByWithAggregationInput | transInternationOrderByWithAggregationInput[]
    by: TransInternationScalarFieldEnum[] | TransInternationScalarFieldEnum
    having?: transInternationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransInternationCountAggregateInputType | true
    _avg?: TransInternationAvgAggregateInputType
    _sum?: TransInternationSumAggregateInputType
    _min?: TransInternationMinAggregateInputType
    _max?: TransInternationMaxAggregateInputType
  }

  export type TransInternationGroupByOutputType = {
    id: number
    montant_initial: number
    nom_service: $Enums.transInter
    montant_trans: number
    montant_recus: number
    date_debut: Date
    date_fin: Date
    soldes: number
    Decouvert: number
    crediut: number
    debit_caisse: number
    debit_BNDA: number
    _count: TransInternationCountAggregateOutputType | null
    _avg: TransInternationAvgAggregateOutputType | null
    _sum: TransInternationSumAggregateOutputType | null
    _min: TransInternationMinAggregateOutputType | null
    _max: TransInternationMaxAggregateOutputType | null
  }

  type GetTransInternationGroupByPayload<T extends transInternationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransInternationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransInternationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransInternationGroupByOutputType[P]>
            : GetScalarType<T[P], TransInternationGroupByOutputType[P]>
        }
      >
    >


  export type transInternationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    montant_initial?: boolean
    nom_service?: boolean
    montant_trans?: boolean
    montant_recus?: boolean
    date_debut?: boolean
    date_fin?: boolean
    soldes?: boolean
    Decouvert?: boolean
    crediut?: boolean
    debit_caisse?: boolean
    debit_BNDA?: boolean
  }, ExtArgs["result"]["transInternation"]>


  export type transInternationSelectScalar = {
    id?: boolean
    montant_initial?: boolean
    nom_service?: boolean
    montant_trans?: boolean
    montant_recus?: boolean
    date_debut?: boolean
    date_fin?: boolean
    soldes?: boolean
    Decouvert?: boolean
    crediut?: boolean
    debit_caisse?: boolean
    debit_BNDA?: boolean
  }


  export type $transInternationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "transInternation"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      montant_initial: number
      nom_service: $Enums.transInter
      montant_trans: number
      montant_recus: number
      date_debut: Date
      date_fin: Date
      soldes: number
      Decouvert: number
      crediut: number
      debit_caisse: number
      debit_BNDA: number
    }, ExtArgs["result"]["transInternation"]>
    composites: {}
  }

  type transInternationGetPayload<S extends boolean | null | undefined | transInternationDefaultArgs> = $Result.GetResult<Prisma.$transInternationPayload, S>

  type transInternationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<transInternationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransInternationCountAggregateInputType | true
    }

  export interface transInternationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['transInternation'], meta: { name: 'transInternation' } }
    /**
     * Find zero or one TransInternation that matches the filter.
     * @param {transInternationFindUniqueArgs} args - Arguments to find a TransInternation
     * @example
     * // Get one TransInternation
     * const transInternation = await prisma.transInternation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends transInternationFindUniqueArgs>(args: SelectSubset<T, transInternationFindUniqueArgs<ExtArgs>>): Prisma__transInternationClient<$Result.GetResult<Prisma.$transInternationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TransInternation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {transInternationFindUniqueOrThrowArgs} args - Arguments to find a TransInternation
     * @example
     * // Get one TransInternation
     * const transInternation = await prisma.transInternation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends transInternationFindUniqueOrThrowArgs>(args: SelectSubset<T, transInternationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__transInternationClient<$Result.GetResult<Prisma.$transInternationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TransInternation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transInternationFindFirstArgs} args - Arguments to find a TransInternation
     * @example
     * // Get one TransInternation
     * const transInternation = await prisma.transInternation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends transInternationFindFirstArgs>(args?: SelectSubset<T, transInternationFindFirstArgs<ExtArgs>>): Prisma__transInternationClient<$Result.GetResult<Prisma.$transInternationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TransInternation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transInternationFindFirstOrThrowArgs} args - Arguments to find a TransInternation
     * @example
     * // Get one TransInternation
     * const transInternation = await prisma.transInternation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends transInternationFindFirstOrThrowArgs>(args?: SelectSubset<T, transInternationFindFirstOrThrowArgs<ExtArgs>>): Prisma__transInternationClient<$Result.GetResult<Prisma.$transInternationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TransInternations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transInternationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TransInternations
     * const transInternations = await prisma.transInternation.findMany()
     * 
     * // Get first 10 TransInternations
     * const transInternations = await prisma.transInternation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transInternationWithIdOnly = await prisma.transInternation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends transInternationFindManyArgs>(args?: SelectSubset<T, transInternationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transInternationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TransInternation.
     * @param {transInternationCreateArgs} args - Arguments to create a TransInternation.
     * @example
     * // Create one TransInternation
     * const TransInternation = await prisma.transInternation.create({
     *   data: {
     *     // ... data to create a TransInternation
     *   }
     * })
     * 
     */
    create<T extends transInternationCreateArgs>(args: SelectSubset<T, transInternationCreateArgs<ExtArgs>>): Prisma__transInternationClient<$Result.GetResult<Prisma.$transInternationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TransInternations.
     * @param {transInternationCreateManyArgs} args - Arguments to create many TransInternations.
     * @example
     * // Create many TransInternations
     * const transInternation = await prisma.transInternation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends transInternationCreateManyArgs>(args?: SelectSubset<T, transInternationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TransInternation.
     * @param {transInternationDeleteArgs} args - Arguments to delete one TransInternation.
     * @example
     * // Delete one TransInternation
     * const TransInternation = await prisma.transInternation.delete({
     *   where: {
     *     // ... filter to delete one TransInternation
     *   }
     * })
     * 
     */
    delete<T extends transInternationDeleteArgs>(args: SelectSubset<T, transInternationDeleteArgs<ExtArgs>>): Prisma__transInternationClient<$Result.GetResult<Prisma.$transInternationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TransInternation.
     * @param {transInternationUpdateArgs} args - Arguments to update one TransInternation.
     * @example
     * // Update one TransInternation
     * const transInternation = await prisma.transInternation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends transInternationUpdateArgs>(args: SelectSubset<T, transInternationUpdateArgs<ExtArgs>>): Prisma__transInternationClient<$Result.GetResult<Prisma.$transInternationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TransInternations.
     * @param {transInternationDeleteManyArgs} args - Arguments to filter TransInternations to delete.
     * @example
     * // Delete a few TransInternations
     * const { count } = await prisma.transInternation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends transInternationDeleteManyArgs>(args?: SelectSubset<T, transInternationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TransInternations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transInternationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TransInternations
     * const transInternation = await prisma.transInternation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends transInternationUpdateManyArgs>(args: SelectSubset<T, transInternationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TransInternation.
     * @param {transInternationUpsertArgs} args - Arguments to update or create a TransInternation.
     * @example
     * // Update or create a TransInternation
     * const transInternation = await prisma.transInternation.upsert({
     *   create: {
     *     // ... data to create a TransInternation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TransInternation we want to update
     *   }
     * })
     */
    upsert<T extends transInternationUpsertArgs>(args: SelectSubset<T, transInternationUpsertArgs<ExtArgs>>): Prisma__transInternationClient<$Result.GetResult<Prisma.$transInternationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TransInternations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transInternationCountArgs} args - Arguments to filter TransInternations to count.
     * @example
     * // Count the number of TransInternations
     * const count = await prisma.transInternation.count({
     *   where: {
     *     // ... the filter for the TransInternations we want to count
     *   }
     * })
    **/
    count<T extends transInternationCountArgs>(
      args?: Subset<T, transInternationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransInternationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TransInternation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransInternationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransInternationAggregateArgs>(args: Subset<T, TransInternationAggregateArgs>): Prisma.PrismaPromise<GetTransInternationAggregateType<T>>

    /**
     * Group by TransInternation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transInternationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends transInternationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: transInternationGroupByArgs['orderBy'] }
        : { orderBy?: transInternationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, transInternationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransInternationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the transInternation model
   */
  readonly fields: transInternationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for transInternation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__transInternationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the transInternation model
   */ 
  interface transInternationFieldRefs {
    readonly id: FieldRef<"transInternation", 'Int'>
    readonly montant_initial: FieldRef<"transInternation", 'Int'>
    readonly nom_service: FieldRef<"transInternation", 'transInter'>
    readonly montant_trans: FieldRef<"transInternation", 'Int'>
    readonly montant_recus: FieldRef<"transInternation", 'Int'>
    readonly date_debut: FieldRef<"transInternation", 'DateTime'>
    readonly date_fin: FieldRef<"transInternation", 'DateTime'>
    readonly soldes: FieldRef<"transInternation", 'Int'>
    readonly Decouvert: FieldRef<"transInternation", 'Int'>
    readonly crediut: FieldRef<"transInternation", 'Int'>
    readonly debit_caisse: FieldRef<"transInternation", 'Int'>
    readonly debit_BNDA: FieldRef<"transInternation", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * transInternation findUnique
   */
  export type transInternationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transInternation
     */
    select?: transInternationSelect<ExtArgs> | null
    /**
     * Filter, which transInternation to fetch.
     */
    where: transInternationWhereUniqueInput
  }

  /**
   * transInternation findUniqueOrThrow
   */
  export type transInternationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transInternation
     */
    select?: transInternationSelect<ExtArgs> | null
    /**
     * Filter, which transInternation to fetch.
     */
    where: transInternationWhereUniqueInput
  }

  /**
   * transInternation findFirst
   */
  export type transInternationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transInternation
     */
    select?: transInternationSelect<ExtArgs> | null
    /**
     * Filter, which transInternation to fetch.
     */
    where?: transInternationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transInternations to fetch.
     */
    orderBy?: transInternationOrderByWithRelationInput | transInternationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transInternations.
     */
    cursor?: transInternationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transInternations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transInternations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transInternations.
     */
    distinct?: TransInternationScalarFieldEnum | TransInternationScalarFieldEnum[]
  }

  /**
   * transInternation findFirstOrThrow
   */
  export type transInternationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transInternation
     */
    select?: transInternationSelect<ExtArgs> | null
    /**
     * Filter, which transInternation to fetch.
     */
    where?: transInternationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transInternations to fetch.
     */
    orderBy?: transInternationOrderByWithRelationInput | transInternationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transInternations.
     */
    cursor?: transInternationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transInternations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transInternations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transInternations.
     */
    distinct?: TransInternationScalarFieldEnum | TransInternationScalarFieldEnum[]
  }

  /**
   * transInternation findMany
   */
  export type transInternationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transInternation
     */
    select?: transInternationSelect<ExtArgs> | null
    /**
     * Filter, which transInternations to fetch.
     */
    where?: transInternationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transInternations to fetch.
     */
    orderBy?: transInternationOrderByWithRelationInput | transInternationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing transInternations.
     */
    cursor?: transInternationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transInternations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transInternations.
     */
    skip?: number
    distinct?: TransInternationScalarFieldEnum | TransInternationScalarFieldEnum[]
  }

  /**
   * transInternation create
   */
  export type transInternationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transInternation
     */
    select?: transInternationSelect<ExtArgs> | null
    /**
     * The data needed to create a transInternation.
     */
    data: XOR<transInternationCreateInput, transInternationUncheckedCreateInput>
  }

  /**
   * transInternation createMany
   */
  export type transInternationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many transInternations.
     */
    data: transInternationCreateManyInput | transInternationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * transInternation update
   */
  export type transInternationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transInternation
     */
    select?: transInternationSelect<ExtArgs> | null
    /**
     * The data needed to update a transInternation.
     */
    data: XOR<transInternationUpdateInput, transInternationUncheckedUpdateInput>
    /**
     * Choose, which transInternation to update.
     */
    where: transInternationWhereUniqueInput
  }

  /**
   * transInternation updateMany
   */
  export type transInternationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update transInternations.
     */
    data: XOR<transInternationUpdateManyMutationInput, transInternationUncheckedUpdateManyInput>
    /**
     * Filter which transInternations to update
     */
    where?: transInternationWhereInput
  }

  /**
   * transInternation upsert
   */
  export type transInternationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transInternation
     */
    select?: transInternationSelect<ExtArgs> | null
    /**
     * The filter to search for the transInternation to update in case it exists.
     */
    where: transInternationWhereUniqueInput
    /**
     * In case the transInternation found by the `where` argument doesn't exist, create a new transInternation with this data.
     */
    create: XOR<transInternationCreateInput, transInternationUncheckedCreateInput>
    /**
     * In case the transInternation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<transInternationUpdateInput, transInternationUncheckedUpdateInput>
  }

  /**
   * transInternation delete
   */
  export type transInternationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transInternation
     */
    select?: transInternationSelect<ExtArgs> | null
    /**
     * Filter which transInternation to delete.
     */
    where: transInternationWhereUniqueInput
  }

  /**
   * transInternation deleteMany
   */
  export type transInternationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transInternations to delete
     */
    where?: transInternationWhereInput
  }

  /**
   * transInternation without action
   */
  export type transInternationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transInternation
     */
    select?: transInternationSelect<ExtArgs> | null
  }


  /**
   * Model uvAbonnement
   */

  export type AggregateUvAbonnement = {
    _count: UvAbonnementCountAggregateOutputType | null
    _avg: UvAbonnementAvgAggregateOutputType | null
    _sum: UvAbonnementSumAggregateOutputType | null
    _min: UvAbonnementMinAggregateOutputType | null
    _max: UvAbonnementMaxAggregateOutputType | null
  }

  export type UvAbonnementAvgAggregateOutputType = {
    id: number | null
    montant: number | null
  }

  export type UvAbonnementSumAggregateOutputType = {
    id: number | null
    montant: number | null
  }

  export type UvAbonnementMinAggregateOutputType = {
    id: number | null
    date: Date | null
    produit: $Enums.uvTele | null
    montant: number | null
  }

  export type UvAbonnementMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    produit: $Enums.uvTele | null
    montant: number | null
  }

  export type UvAbonnementCountAggregateOutputType = {
    id: number
    date: number
    produit: number
    montant: number
    _all: number
  }


  export type UvAbonnementAvgAggregateInputType = {
    id?: true
    montant?: true
  }

  export type UvAbonnementSumAggregateInputType = {
    id?: true
    montant?: true
  }

  export type UvAbonnementMinAggregateInputType = {
    id?: true
    date?: true
    produit?: true
    montant?: true
  }

  export type UvAbonnementMaxAggregateInputType = {
    id?: true
    date?: true
    produit?: true
    montant?: true
  }

  export type UvAbonnementCountAggregateInputType = {
    id?: true
    date?: true
    produit?: true
    montant?: true
    _all?: true
  }

  export type UvAbonnementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which uvAbonnement to aggregate.
     */
    where?: uvAbonnementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of uvAbonnements to fetch.
     */
    orderBy?: uvAbonnementOrderByWithRelationInput | uvAbonnementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: uvAbonnementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` uvAbonnements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` uvAbonnements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned uvAbonnements
    **/
    _count?: true | UvAbonnementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UvAbonnementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UvAbonnementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UvAbonnementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UvAbonnementMaxAggregateInputType
  }

  export type GetUvAbonnementAggregateType<T extends UvAbonnementAggregateArgs> = {
        [P in keyof T & keyof AggregateUvAbonnement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUvAbonnement[P]>
      : GetScalarType<T[P], AggregateUvAbonnement[P]>
  }




  export type uvAbonnementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: uvAbonnementWhereInput
    orderBy?: uvAbonnementOrderByWithAggregationInput | uvAbonnementOrderByWithAggregationInput[]
    by: UvAbonnementScalarFieldEnum[] | UvAbonnementScalarFieldEnum
    having?: uvAbonnementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UvAbonnementCountAggregateInputType | true
    _avg?: UvAbonnementAvgAggregateInputType
    _sum?: UvAbonnementSumAggregateInputType
    _min?: UvAbonnementMinAggregateInputType
    _max?: UvAbonnementMaxAggregateInputType
  }

  export type UvAbonnementGroupByOutputType = {
    id: number
    date: Date
    produit: $Enums.uvTele
    montant: number
    _count: UvAbonnementCountAggregateOutputType | null
    _avg: UvAbonnementAvgAggregateOutputType | null
    _sum: UvAbonnementSumAggregateOutputType | null
    _min: UvAbonnementMinAggregateOutputType | null
    _max: UvAbonnementMaxAggregateOutputType | null
  }

  type GetUvAbonnementGroupByPayload<T extends uvAbonnementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UvAbonnementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UvAbonnementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UvAbonnementGroupByOutputType[P]>
            : GetScalarType<T[P], UvAbonnementGroupByOutputType[P]>
        }
      >
    >


  export type uvAbonnementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    produit?: boolean
    montant?: boolean
  }, ExtArgs["result"]["uvAbonnement"]>


  export type uvAbonnementSelectScalar = {
    id?: boolean
    date?: boolean
    produit?: boolean
    montant?: boolean
  }


  export type $uvAbonnementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "uvAbonnement"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      produit: $Enums.uvTele
      montant: number
    }, ExtArgs["result"]["uvAbonnement"]>
    composites: {}
  }

  type uvAbonnementGetPayload<S extends boolean | null | undefined | uvAbonnementDefaultArgs> = $Result.GetResult<Prisma.$uvAbonnementPayload, S>

  type uvAbonnementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<uvAbonnementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UvAbonnementCountAggregateInputType | true
    }

  export interface uvAbonnementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['uvAbonnement'], meta: { name: 'uvAbonnement' } }
    /**
     * Find zero or one UvAbonnement that matches the filter.
     * @param {uvAbonnementFindUniqueArgs} args - Arguments to find a UvAbonnement
     * @example
     * // Get one UvAbonnement
     * const uvAbonnement = await prisma.uvAbonnement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends uvAbonnementFindUniqueArgs>(args: SelectSubset<T, uvAbonnementFindUniqueArgs<ExtArgs>>): Prisma__uvAbonnementClient<$Result.GetResult<Prisma.$uvAbonnementPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UvAbonnement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {uvAbonnementFindUniqueOrThrowArgs} args - Arguments to find a UvAbonnement
     * @example
     * // Get one UvAbonnement
     * const uvAbonnement = await prisma.uvAbonnement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends uvAbonnementFindUniqueOrThrowArgs>(args: SelectSubset<T, uvAbonnementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__uvAbonnementClient<$Result.GetResult<Prisma.$uvAbonnementPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UvAbonnement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {uvAbonnementFindFirstArgs} args - Arguments to find a UvAbonnement
     * @example
     * // Get one UvAbonnement
     * const uvAbonnement = await prisma.uvAbonnement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends uvAbonnementFindFirstArgs>(args?: SelectSubset<T, uvAbonnementFindFirstArgs<ExtArgs>>): Prisma__uvAbonnementClient<$Result.GetResult<Prisma.$uvAbonnementPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UvAbonnement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {uvAbonnementFindFirstOrThrowArgs} args - Arguments to find a UvAbonnement
     * @example
     * // Get one UvAbonnement
     * const uvAbonnement = await prisma.uvAbonnement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends uvAbonnementFindFirstOrThrowArgs>(args?: SelectSubset<T, uvAbonnementFindFirstOrThrowArgs<ExtArgs>>): Prisma__uvAbonnementClient<$Result.GetResult<Prisma.$uvAbonnementPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UvAbonnements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {uvAbonnementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UvAbonnements
     * const uvAbonnements = await prisma.uvAbonnement.findMany()
     * 
     * // Get first 10 UvAbonnements
     * const uvAbonnements = await prisma.uvAbonnement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const uvAbonnementWithIdOnly = await prisma.uvAbonnement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends uvAbonnementFindManyArgs>(args?: SelectSubset<T, uvAbonnementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$uvAbonnementPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UvAbonnement.
     * @param {uvAbonnementCreateArgs} args - Arguments to create a UvAbonnement.
     * @example
     * // Create one UvAbonnement
     * const UvAbonnement = await prisma.uvAbonnement.create({
     *   data: {
     *     // ... data to create a UvAbonnement
     *   }
     * })
     * 
     */
    create<T extends uvAbonnementCreateArgs>(args: SelectSubset<T, uvAbonnementCreateArgs<ExtArgs>>): Prisma__uvAbonnementClient<$Result.GetResult<Prisma.$uvAbonnementPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UvAbonnements.
     * @param {uvAbonnementCreateManyArgs} args - Arguments to create many UvAbonnements.
     * @example
     * // Create many UvAbonnements
     * const uvAbonnement = await prisma.uvAbonnement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends uvAbonnementCreateManyArgs>(args?: SelectSubset<T, uvAbonnementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UvAbonnement.
     * @param {uvAbonnementDeleteArgs} args - Arguments to delete one UvAbonnement.
     * @example
     * // Delete one UvAbonnement
     * const UvAbonnement = await prisma.uvAbonnement.delete({
     *   where: {
     *     // ... filter to delete one UvAbonnement
     *   }
     * })
     * 
     */
    delete<T extends uvAbonnementDeleteArgs>(args: SelectSubset<T, uvAbonnementDeleteArgs<ExtArgs>>): Prisma__uvAbonnementClient<$Result.GetResult<Prisma.$uvAbonnementPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UvAbonnement.
     * @param {uvAbonnementUpdateArgs} args - Arguments to update one UvAbonnement.
     * @example
     * // Update one UvAbonnement
     * const uvAbonnement = await prisma.uvAbonnement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends uvAbonnementUpdateArgs>(args: SelectSubset<T, uvAbonnementUpdateArgs<ExtArgs>>): Prisma__uvAbonnementClient<$Result.GetResult<Prisma.$uvAbonnementPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UvAbonnements.
     * @param {uvAbonnementDeleteManyArgs} args - Arguments to filter UvAbonnements to delete.
     * @example
     * // Delete a few UvAbonnements
     * const { count } = await prisma.uvAbonnement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends uvAbonnementDeleteManyArgs>(args?: SelectSubset<T, uvAbonnementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UvAbonnements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {uvAbonnementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UvAbonnements
     * const uvAbonnement = await prisma.uvAbonnement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends uvAbonnementUpdateManyArgs>(args: SelectSubset<T, uvAbonnementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UvAbonnement.
     * @param {uvAbonnementUpsertArgs} args - Arguments to update or create a UvAbonnement.
     * @example
     * // Update or create a UvAbonnement
     * const uvAbonnement = await prisma.uvAbonnement.upsert({
     *   create: {
     *     // ... data to create a UvAbonnement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UvAbonnement we want to update
     *   }
     * })
     */
    upsert<T extends uvAbonnementUpsertArgs>(args: SelectSubset<T, uvAbonnementUpsertArgs<ExtArgs>>): Prisma__uvAbonnementClient<$Result.GetResult<Prisma.$uvAbonnementPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UvAbonnements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {uvAbonnementCountArgs} args - Arguments to filter UvAbonnements to count.
     * @example
     * // Count the number of UvAbonnements
     * const count = await prisma.uvAbonnement.count({
     *   where: {
     *     // ... the filter for the UvAbonnements we want to count
     *   }
     * })
    **/
    count<T extends uvAbonnementCountArgs>(
      args?: Subset<T, uvAbonnementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UvAbonnementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UvAbonnement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UvAbonnementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UvAbonnementAggregateArgs>(args: Subset<T, UvAbonnementAggregateArgs>): Prisma.PrismaPromise<GetUvAbonnementAggregateType<T>>

    /**
     * Group by UvAbonnement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {uvAbonnementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends uvAbonnementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: uvAbonnementGroupByArgs['orderBy'] }
        : { orderBy?: uvAbonnementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, uvAbonnementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUvAbonnementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the uvAbonnement model
   */
  readonly fields: uvAbonnementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for uvAbonnement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__uvAbonnementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the uvAbonnement model
   */ 
  interface uvAbonnementFieldRefs {
    readonly id: FieldRef<"uvAbonnement", 'Int'>
    readonly date: FieldRef<"uvAbonnement", 'DateTime'>
    readonly produit: FieldRef<"uvAbonnement", 'uvTele'>
    readonly montant: FieldRef<"uvAbonnement", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * uvAbonnement findUnique
   */
  export type uvAbonnementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the uvAbonnement
     */
    select?: uvAbonnementSelect<ExtArgs> | null
    /**
     * Filter, which uvAbonnement to fetch.
     */
    where: uvAbonnementWhereUniqueInput
  }

  /**
   * uvAbonnement findUniqueOrThrow
   */
  export type uvAbonnementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the uvAbonnement
     */
    select?: uvAbonnementSelect<ExtArgs> | null
    /**
     * Filter, which uvAbonnement to fetch.
     */
    where: uvAbonnementWhereUniqueInput
  }

  /**
   * uvAbonnement findFirst
   */
  export type uvAbonnementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the uvAbonnement
     */
    select?: uvAbonnementSelect<ExtArgs> | null
    /**
     * Filter, which uvAbonnement to fetch.
     */
    where?: uvAbonnementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of uvAbonnements to fetch.
     */
    orderBy?: uvAbonnementOrderByWithRelationInput | uvAbonnementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for uvAbonnements.
     */
    cursor?: uvAbonnementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` uvAbonnements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` uvAbonnements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of uvAbonnements.
     */
    distinct?: UvAbonnementScalarFieldEnum | UvAbonnementScalarFieldEnum[]
  }

  /**
   * uvAbonnement findFirstOrThrow
   */
  export type uvAbonnementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the uvAbonnement
     */
    select?: uvAbonnementSelect<ExtArgs> | null
    /**
     * Filter, which uvAbonnement to fetch.
     */
    where?: uvAbonnementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of uvAbonnements to fetch.
     */
    orderBy?: uvAbonnementOrderByWithRelationInput | uvAbonnementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for uvAbonnements.
     */
    cursor?: uvAbonnementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` uvAbonnements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` uvAbonnements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of uvAbonnements.
     */
    distinct?: UvAbonnementScalarFieldEnum | UvAbonnementScalarFieldEnum[]
  }

  /**
   * uvAbonnement findMany
   */
  export type uvAbonnementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the uvAbonnement
     */
    select?: uvAbonnementSelect<ExtArgs> | null
    /**
     * Filter, which uvAbonnements to fetch.
     */
    where?: uvAbonnementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of uvAbonnements to fetch.
     */
    orderBy?: uvAbonnementOrderByWithRelationInput | uvAbonnementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing uvAbonnements.
     */
    cursor?: uvAbonnementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` uvAbonnements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` uvAbonnements.
     */
    skip?: number
    distinct?: UvAbonnementScalarFieldEnum | UvAbonnementScalarFieldEnum[]
  }

  /**
   * uvAbonnement create
   */
  export type uvAbonnementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the uvAbonnement
     */
    select?: uvAbonnementSelect<ExtArgs> | null
    /**
     * The data needed to create a uvAbonnement.
     */
    data: XOR<uvAbonnementCreateInput, uvAbonnementUncheckedCreateInput>
  }

  /**
   * uvAbonnement createMany
   */
  export type uvAbonnementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many uvAbonnements.
     */
    data: uvAbonnementCreateManyInput | uvAbonnementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * uvAbonnement update
   */
  export type uvAbonnementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the uvAbonnement
     */
    select?: uvAbonnementSelect<ExtArgs> | null
    /**
     * The data needed to update a uvAbonnement.
     */
    data: XOR<uvAbonnementUpdateInput, uvAbonnementUncheckedUpdateInput>
    /**
     * Choose, which uvAbonnement to update.
     */
    where: uvAbonnementWhereUniqueInput
  }

  /**
   * uvAbonnement updateMany
   */
  export type uvAbonnementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update uvAbonnements.
     */
    data: XOR<uvAbonnementUpdateManyMutationInput, uvAbonnementUncheckedUpdateManyInput>
    /**
     * Filter which uvAbonnements to update
     */
    where?: uvAbonnementWhereInput
  }

  /**
   * uvAbonnement upsert
   */
  export type uvAbonnementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the uvAbonnement
     */
    select?: uvAbonnementSelect<ExtArgs> | null
    /**
     * The filter to search for the uvAbonnement to update in case it exists.
     */
    where: uvAbonnementWhereUniqueInput
    /**
     * In case the uvAbonnement found by the `where` argument doesn't exist, create a new uvAbonnement with this data.
     */
    create: XOR<uvAbonnementCreateInput, uvAbonnementUncheckedCreateInput>
    /**
     * In case the uvAbonnement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<uvAbonnementUpdateInput, uvAbonnementUncheckedUpdateInput>
  }

  /**
   * uvAbonnement delete
   */
  export type uvAbonnementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the uvAbonnement
     */
    select?: uvAbonnementSelect<ExtArgs> | null
    /**
     * Filter which uvAbonnement to delete.
     */
    where: uvAbonnementWhereUniqueInput
  }

  /**
   * uvAbonnement deleteMany
   */
  export type uvAbonnementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which uvAbonnements to delete
     */
    where?: uvAbonnementWhereInput
  }

  /**
   * uvAbonnement without action
   */
  export type uvAbonnementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the uvAbonnement
     */
    select?: uvAbonnementSelect<ExtArgs> | null
  }


  /**
   * Model caisse
   */

  export type AggregateCaisse = {
    _count: CaisseCountAggregateOutputType | null
    _avg: CaisseAvgAggregateOutputType | null
    _sum: CaisseSumAggregateOutputType | null
    _min: CaisseMinAggregateOutputType | null
    _max: CaisseMaxAggregateOutputType | null
  }

  export type CaisseAvgAggregateOutputType = {
    id: number | null
    stock_initial: number | null
    stock_final: number | null
    montant_total: number | null
    solde: number | null
  }

  export type CaisseSumAggregateOutputType = {
    id: number | null
    stock_initial: number | null
    stock_final: number | null
    montant_total: number | null
    solde: number | null
  }

  export type CaisseMinAggregateOutputType = {
    id: number | null
    date: Date | null
    service: $Enums.nomService | null
    stock_initial: number | null
    stock_final: number | null
    montant_total: number | null
    solde: number | null
  }

  export type CaisseMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    service: $Enums.nomService | null
    stock_initial: number | null
    stock_final: number | null
    montant_total: number | null
    solde: number | null
  }

  export type CaisseCountAggregateOutputType = {
    id: number
    date: number
    service: number
    stock_initial: number
    stock_final: number
    montant_total: number
    solde: number
    _all: number
  }


  export type CaisseAvgAggregateInputType = {
    id?: true
    stock_initial?: true
    stock_final?: true
    montant_total?: true
    solde?: true
  }

  export type CaisseSumAggregateInputType = {
    id?: true
    stock_initial?: true
    stock_final?: true
    montant_total?: true
    solde?: true
  }

  export type CaisseMinAggregateInputType = {
    id?: true
    date?: true
    service?: true
    stock_initial?: true
    stock_final?: true
    montant_total?: true
    solde?: true
  }

  export type CaisseMaxAggregateInputType = {
    id?: true
    date?: true
    service?: true
    stock_initial?: true
    stock_final?: true
    montant_total?: true
    solde?: true
  }

  export type CaisseCountAggregateInputType = {
    id?: true
    date?: true
    service?: true
    stock_initial?: true
    stock_final?: true
    montant_total?: true
    solde?: true
    _all?: true
  }

  export type CaisseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which caisse to aggregate.
     */
    where?: caisseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of caisses to fetch.
     */
    orderBy?: caisseOrderByWithRelationInput | caisseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: caisseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` caisses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` caisses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned caisses
    **/
    _count?: true | CaisseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CaisseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CaisseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaisseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaisseMaxAggregateInputType
  }

  export type GetCaisseAggregateType<T extends CaisseAggregateArgs> = {
        [P in keyof T & keyof AggregateCaisse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCaisse[P]>
      : GetScalarType<T[P], AggregateCaisse[P]>
  }




  export type caisseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: caisseWhereInput
    orderBy?: caisseOrderByWithAggregationInput | caisseOrderByWithAggregationInput[]
    by: CaisseScalarFieldEnum[] | CaisseScalarFieldEnum
    having?: caisseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaisseCountAggregateInputType | true
    _avg?: CaisseAvgAggregateInputType
    _sum?: CaisseSumAggregateInputType
    _min?: CaisseMinAggregateInputType
    _max?: CaisseMaxAggregateInputType
  }

  export type CaisseGroupByOutputType = {
    id: number
    date: Date
    service: $Enums.nomService
    stock_initial: number
    stock_final: number
    montant_total: number
    solde: number
    _count: CaisseCountAggregateOutputType | null
    _avg: CaisseAvgAggregateOutputType | null
    _sum: CaisseSumAggregateOutputType | null
    _min: CaisseMinAggregateOutputType | null
    _max: CaisseMaxAggregateOutputType | null
  }

  type GetCaisseGroupByPayload<T extends caisseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaisseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaisseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaisseGroupByOutputType[P]>
            : GetScalarType<T[P], CaisseGroupByOutputType[P]>
        }
      >
    >


  export type caisseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    service?: boolean
    stock_initial?: boolean
    stock_final?: boolean
    montant_total?: boolean
    solde?: boolean
  }, ExtArgs["result"]["caisse"]>


  export type caisseSelectScalar = {
    id?: boolean
    date?: boolean
    service?: boolean
    stock_initial?: boolean
    stock_final?: boolean
    montant_total?: boolean
    solde?: boolean
  }


  export type $caissePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "caisse"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      service: $Enums.nomService
      stock_initial: number
      stock_final: number
      montant_total: number
      solde: number
    }, ExtArgs["result"]["caisse"]>
    composites: {}
  }

  type caisseGetPayload<S extends boolean | null | undefined | caisseDefaultArgs> = $Result.GetResult<Prisma.$caissePayload, S>

  type caisseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<caisseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CaisseCountAggregateInputType | true
    }

  export interface caisseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['caisse'], meta: { name: 'caisse' } }
    /**
     * Find zero or one Caisse that matches the filter.
     * @param {caisseFindUniqueArgs} args - Arguments to find a Caisse
     * @example
     * // Get one Caisse
     * const caisse = await prisma.caisse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends caisseFindUniqueArgs>(args: SelectSubset<T, caisseFindUniqueArgs<ExtArgs>>): Prisma__caisseClient<$Result.GetResult<Prisma.$caissePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Caisse that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {caisseFindUniqueOrThrowArgs} args - Arguments to find a Caisse
     * @example
     * // Get one Caisse
     * const caisse = await prisma.caisse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends caisseFindUniqueOrThrowArgs>(args: SelectSubset<T, caisseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__caisseClient<$Result.GetResult<Prisma.$caissePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Caisse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {caisseFindFirstArgs} args - Arguments to find a Caisse
     * @example
     * // Get one Caisse
     * const caisse = await prisma.caisse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends caisseFindFirstArgs>(args?: SelectSubset<T, caisseFindFirstArgs<ExtArgs>>): Prisma__caisseClient<$Result.GetResult<Prisma.$caissePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Caisse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {caisseFindFirstOrThrowArgs} args - Arguments to find a Caisse
     * @example
     * // Get one Caisse
     * const caisse = await prisma.caisse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends caisseFindFirstOrThrowArgs>(args?: SelectSubset<T, caisseFindFirstOrThrowArgs<ExtArgs>>): Prisma__caisseClient<$Result.GetResult<Prisma.$caissePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Caisses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {caisseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Caisses
     * const caisses = await prisma.caisse.findMany()
     * 
     * // Get first 10 Caisses
     * const caisses = await prisma.caisse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caisseWithIdOnly = await prisma.caisse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends caisseFindManyArgs>(args?: SelectSubset<T, caisseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$caissePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Caisse.
     * @param {caisseCreateArgs} args - Arguments to create a Caisse.
     * @example
     * // Create one Caisse
     * const Caisse = await prisma.caisse.create({
     *   data: {
     *     // ... data to create a Caisse
     *   }
     * })
     * 
     */
    create<T extends caisseCreateArgs>(args: SelectSubset<T, caisseCreateArgs<ExtArgs>>): Prisma__caisseClient<$Result.GetResult<Prisma.$caissePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Caisses.
     * @param {caisseCreateManyArgs} args - Arguments to create many Caisses.
     * @example
     * // Create many Caisses
     * const caisse = await prisma.caisse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends caisseCreateManyArgs>(args?: SelectSubset<T, caisseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Caisse.
     * @param {caisseDeleteArgs} args - Arguments to delete one Caisse.
     * @example
     * // Delete one Caisse
     * const Caisse = await prisma.caisse.delete({
     *   where: {
     *     // ... filter to delete one Caisse
     *   }
     * })
     * 
     */
    delete<T extends caisseDeleteArgs>(args: SelectSubset<T, caisseDeleteArgs<ExtArgs>>): Prisma__caisseClient<$Result.GetResult<Prisma.$caissePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Caisse.
     * @param {caisseUpdateArgs} args - Arguments to update one Caisse.
     * @example
     * // Update one Caisse
     * const caisse = await prisma.caisse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends caisseUpdateArgs>(args: SelectSubset<T, caisseUpdateArgs<ExtArgs>>): Prisma__caisseClient<$Result.GetResult<Prisma.$caissePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Caisses.
     * @param {caisseDeleteManyArgs} args - Arguments to filter Caisses to delete.
     * @example
     * // Delete a few Caisses
     * const { count } = await prisma.caisse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends caisseDeleteManyArgs>(args?: SelectSubset<T, caisseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Caisses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {caisseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Caisses
     * const caisse = await prisma.caisse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends caisseUpdateManyArgs>(args: SelectSubset<T, caisseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Caisse.
     * @param {caisseUpsertArgs} args - Arguments to update or create a Caisse.
     * @example
     * // Update or create a Caisse
     * const caisse = await prisma.caisse.upsert({
     *   create: {
     *     // ... data to create a Caisse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Caisse we want to update
     *   }
     * })
     */
    upsert<T extends caisseUpsertArgs>(args: SelectSubset<T, caisseUpsertArgs<ExtArgs>>): Prisma__caisseClient<$Result.GetResult<Prisma.$caissePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Caisses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {caisseCountArgs} args - Arguments to filter Caisses to count.
     * @example
     * // Count the number of Caisses
     * const count = await prisma.caisse.count({
     *   where: {
     *     // ... the filter for the Caisses we want to count
     *   }
     * })
    **/
    count<T extends caisseCountArgs>(
      args?: Subset<T, caisseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaisseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Caisse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaisseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaisseAggregateArgs>(args: Subset<T, CaisseAggregateArgs>): Prisma.PrismaPromise<GetCaisseAggregateType<T>>

    /**
     * Group by Caisse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {caisseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends caisseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: caisseGroupByArgs['orderBy'] }
        : { orderBy?: caisseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, caisseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaisseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the caisse model
   */
  readonly fields: caisseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for caisse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__caisseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the caisse model
   */ 
  interface caisseFieldRefs {
    readonly id: FieldRef<"caisse", 'Int'>
    readonly date: FieldRef<"caisse", 'DateTime'>
    readonly service: FieldRef<"caisse", 'nomService'>
    readonly stock_initial: FieldRef<"caisse", 'Int'>
    readonly stock_final: FieldRef<"caisse", 'Int'>
    readonly montant_total: FieldRef<"caisse", 'Int'>
    readonly solde: FieldRef<"caisse", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * caisse findUnique
   */
  export type caisseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the caisse
     */
    select?: caisseSelect<ExtArgs> | null
    /**
     * Filter, which caisse to fetch.
     */
    where: caisseWhereUniqueInput
  }

  /**
   * caisse findUniqueOrThrow
   */
  export type caisseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the caisse
     */
    select?: caisseSelect<ExtArgs> | null
    /**
     * Filter, which caisse to fetch.
     */
    where: caisseWhereUniqueInput
  }

  /**
   * caisse findFirst
   */
  export type caisseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the caisse
     */
    select?: caisseSelect<ExtArgs> | null
    /**
     * Filter, which caisse to fetch.
     */
    where?: caisseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of caisses to fetch.
     */
    orderBy?: caisseOrderByWithRelationInput | caisseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for caisses.
     */
    cursor?: caisseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` caisses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` caisses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of caisses.
     */
    distinct?: CaisseScalarFieldEnum | CaisseScalarFieldEnum[]
  }

  /**
   * caisse findFirstOrThrow
   */
  export type caisseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the caisse
     */
    select?: caisseSelect<ExtArgs> | null
    /**
     * Filter, which caisse to fetch.
     */
    where?: caisseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of caisses to fetch.
     */
    orderBy?: caisseOrderByWithRelationInput | caisseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for caisses.
     */
    cursor?: caisseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` caisses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` caisses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of caisses.
     */
    distinct?: CaisseScalarFieldEnum | CaisseScalarFieldEnum[]
  }

  /**
   * caisse findMany
   */
  export type caisseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the caisse
     */
    select?: caisseSelect<ExtArgs> | null
    /**
     * Filter, which caisses to fetch.
     */
    where?: caisseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of caisses to fetch.
     */
    orderBy?: caisseOrderByWithRelationInput | caisseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing caisses.
     */
    cursor?: caisseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` caisses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` caisses.
     */
    skip?: number
    distinct?: CaisseScalarFieldEnum | CaisseScalarFieldEnum[]
  }

  /**
   * caisse create
   */
  export type caisseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the caisse
     */
    select?: caisseSelect<ExtArgs> | null
    /**
     * The data needed to create a caisse.
     */
    data: XOR<caisseCreateInput, caisseUncheckedCreateInput>
  }

  /**
   * caisse createMany
   */
  export type caisseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many caisses.
     */
    data: caisseCreateManyInput | caisseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * caisse update
   */
  export type caisseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the caisse
     */
    select?: caisseSelect<ExtArgs> | null
    /**
     * The data needed to update a caisse.
     */
    data: XOR<caisseUpdateInput, caisseUncheckedUpdateInput>
    /**
     * Choose, which caisse to update.
     */
    where: caisseWhereUniqueInput
  }

  /**
   * caisse updateMany
   */
  export type caisseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update caisses.
     */
    data: XOR<caisseUpdateManyMutationInput, caisseUncheckedUpdateManyInput>
    /**
     * Filter which caisses to update
     */
    where?: caisseWhereInput
  }

  /**
   * caisse upsert
   */
  export type caisseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the caisse
     */
    select?: caisseSelect<ExtArgs> | null
    /**
     * The filter to search for the caisse to update in case it exists.
     */
    where: caisseWhereUniqueInput
    /**
     * In case the caisse found by the `where` argument doesn't exist, create a new caisse with this data.
     */
    create: XOR<caisseCreateInput, caisseUncheckedCreateInput>
    /**
     * In case the caisse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<caisseUpdateInput, caisseUncheckedUpdateInput>
  }

  /**
   * caisse delete
   */
  export type caisseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the caisse
     */
    select?: caisseSelect<ExtArgs> | null
    /**
     * Filter which caisse to delete.
     */
    where: caisseWhereUniqueInput
  }

  /**
   * caisse deleteMany
   */
  export type caisseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which caisses to delete
     */
    where?: caisseWhereInput
  }

  /**
   * caisse without action
   */
  export type caisseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the caisse
     */
    select?: caisseSelect<ExtArgs> | null
  }


  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ProfileSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ProfileMinAggregateOutputType = {
    id: number | null
    bio: string | null
    userId: number | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: number | null
    bio: string | null
    userId: number | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    bio: number
    userId: number
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ProfileSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ProfileMinAggregateInputType = {
    id?: true
    bio?: true
    userId?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    bio?: true
    userId?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    bio?: true
    userId?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _avg?: ProfileAvgAggregateInputType
    _sum?: ProfileSumAggregateInputType
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    id: number
    bio: string | null
    userId: number
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bio?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>


  export type ProfileSelectScalar = {
    id?: boolean
    bio?: boolean
    userId?: boolean
  }

  export type ProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      bio: string | null
      userId: number
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }

  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfileFindUniqueArgs>(args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Profile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfileFindFirstArgs>(args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfileFindManyArgs>(args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
     */
    create<T extends ProfileCreateArgs>(args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Profiles.
     * @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfileCreateManyArgs>(args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
     */
    delete<T extends ProfileDeleteArgs>(args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfileUpdateArgs>(args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfileDeleteManyArgs>(args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfileUpdateManyArgs>(args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
     */
    upsert<T extends ProfileUpsertArgs>(args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profile model
   */ 
  interface ProfileFieldRefs {
    readonly id: FieldRef<"Profile", 'Int'>
    readonly bio: FieldRef<"Profile", 'String'>
    readonly userId: FieldRef<"Profile", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }

  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
  }

  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }

  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
  }

  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    name: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    profile?: boolean | User$profileArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | User$profileArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      profile: Prisma.$ProfilePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      name: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends User$profileArgs<ExtArgs> = {}>(args?: Subset<T, User$profileArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.profile
   */
  export type User$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ClientCanalScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    prenom: 'prenom',
    telephone: 'telephone',
    numAbonne: 'numAbonne',
    finAbonn: 'finAbonn'
  };

  export type ClientCanalScalarFieldEnum = (typeof ClientCanalScalarFieldEnum)[keyof typeof ClientCanalScalarFieldEnum]


  export const CommissionDuMoisScalarFieldEnum: {
    id: 'id',
    date: 'date',
    mom_service: 'mom_service',
    debit: 'debit',
    montant: 'montant',
    sold: 'sold'
  };

  export type CommissionDuMoisScalarFieldEnum = (typeof CommissionDuMoisScalarFieldEnum)[keyof typeof CommissionDuMoisScalarFieldEnum]


  export const CreditEntrepriseScalarFieldEnum: {
    id: 'id',
    date: 'date',
    nomClient: 'nomClient',
    prenomClient: 'prenomClient',
    motif: 'motif',
    montant: 'montant',
    montant_paye: 'montant_paye',
    montant_restant: 'montant_restant',
    solde: 'solde'
  };

  export type CreditEntrepriseScalarFieldEnum = (typeof CreditEntrepriseScalarFieldEnum)[keyof typeof CreditEntrepriseScalarFieldEnum]


  export const PrepayeeScalarFieldEnum: {
    id: 'id',
    date: 'date',
    nom_client: 'nom_client',
    montant_initial: 'montant_initial',
    montant_depense: 'montant_depense',
    montant_restant: 'montant_restant'
  };

  export type PrepayeeScalarFieldEnum = (typeof PrepayeeScalarFieldEnum)[keyof typeof PrepayeeScalarFieldEnum]


  export const ServiceEntrepriseScalarFieldEnum: {
    id: 'id',
    date: 'date',
    mom_service: 'mom_service',
    solde_a_nouveau: 'solde_a_nouveau',
    montant_final: 'montant_final',
    total: 'total'
  };

  export type ServiceEntrepriseScalarFieldEnum = (typeof ServiceEntrepriseScalarFieldEnum)[keyof typeof ServiceEntrepriseScalarFieldEnum]


  export const TransInternationScalarFieldEnum: {
    id: 'id',
    montant_initial: 'montant_initial',
    nom_service: 'nom_service',
    montant_trans: 'montant_trans',
    montant_recus: 'montant_recus',
    date_debut: 'date_debut',
    date_fin: 'date_fin',
    soldes: 'soldes',
    Decouvert: 'Decouvert',
    crediut: 'crediut',
    debit_caisse: 'debit_caisse',
    debit_BNDA: 'debit_BNDA'
  };

  export type TransInternationScalarFieldEnum = (typeof TransInternationScalarFieldEnum)[keyof typeof TransInternationScalarFieldEnum]


  export const UvAbonnementScalarFieldEnum: {
    id: 'id',
    date: 'date',
    produit: 'produit',
    montant: 'montant'
  };

  export type UvAbonnementScalarFieldEnum = (typeof UvAbonnementScalarFieldEnum)[keyof typeof UvAbonnementScalarFieldEnum]


  export const CaisseScalarFieldEnum: {
    id: 'id',
    date: 'date',
    service: 'service',
    stock_initial: 'stock_initial',
    stock_final: 'stock_final',
    montant_total: 'montant_total',
    solde: 'solde'
  };

  export type CaisseScalarFieldEnum = (typeof CaisseScalarFieldEnum)[keyof typeof CaisseScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    bio: 'bio',
    userId: 'userId'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'nomService'
   */
  export type EnumnomServiceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'nomService'>
    


  /**
   * Reference to a field of type 'transInter'
   */
  export type EnumtransInterFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'transInter'>
    


  /**
   * Reference to a field of type 'uvTele'
   */
  export type EnumuvTeleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'uvTele'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type clientCanalWhereInput = {
    AND?: clientCanalWhereInput | clientCanalWhereInput[]
    OR?: clientCanalWhereInput[]
    NOT?: clientCanalWhereInput | clientCanalWhereInput[]
    id?: IntFilter<"clientCanal"> | number
    nom?: StringFilter<"clientCanal"> | string
    prenom?: StringFilter<"clientCanal"> | string
    telephone?: StringFilter<"clientCanal"> | string
    numAbonne?: BigIntFilter<"clientCanal"> | bigint | number
    finAbonn?: DateTimeFilter<"clientCanal"> | Date | string
  }

  export type clientCanalOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    telephone?: SortOrder
    numAbonne?: SortOrder
    finAbonn?: SortOrder
  }

  export type clientCanalWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    telephone?: string
    numAbonne?: bigint | number
    AND?: clientCanalWhereInput | clientCanalWhereInput[]
    OR?: clientCanalWhereInput[]
    NOT?: clientCanalWhereInput | clientCanalWhereInput[]
    nom?: StringFilter<"clientCanal"> | string
    prenom?: StringFilter<"clientCanal"> | string
    finAbonn?: DateTimeFilter<"clientCanal"> | Date | string
  }, "id" | "telephone" | "numAbonne">

  export type clientCanalOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    telephone?: SortOrder
    numAbonne?: SortOrder
    finAbonn?: SortOrder
    _count?: clientCanalCountOrderByAggregateInput
    _avg?: clientCanalAvgOrderByAggregateInput
    _max?: clientCanalMaxOrderByAggregateInput
    _min?: clientCanalMinOrderByAggregateInput
    _sum?: clientCanalSumOrderByAggregateInput
  }

  export type clientCanalScalarWhereWithAggregatesInput = {
    AND?: clientCanalScalarWhereWithAggregatesInput | clientCanalScalarWhereWithAggregatesInput[]
    OR?: clientCanalScalarWhereWithAggregatesInput[]
    NOT?: clientCanalScalarWhereWithAggregatesInput | clientCanalScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"clientCanal"> | number
    nom?: StringWithAggregatesFilter<"clientCanal"> | string
    prenom?: StringWithAggregatesFilter<"clientCanal"> | string
    telephone?: StringWithAggregatesFilter<"clientCanal"> | string
    numAbonne?: BigIntWithAggregatesFilter<"clientCanal"> | bigint | number
    finAbonn?: DateTimeWithAggregatesFilter<"clientCanal"> | Date | string
  }

  export type commissionDuMoisWhereInput = {
    AND?: commissionDuMoisWhereInput | commissionDuMoisWhereInput[]
    OR?: commissionDuMoisWhereInput[]
    NOT?: commissionDuMoisWhereInput | commissionDuMoisWhereInput[]
    id?: IntFilter<"commissionDuMois"> | number
    date?: DateTimeFilter<"commissionDuMois"> | Date | string
    mom_service?: EnumnomServiceFilter<"commissionDuMois"> | $Enums.nomService
    debit?: IntFilter<"commissionDuMois"> | number
    montant?: IntFilter<"commissionDuMois"> | number
    sold?: IntFilter<"commissionDuMois"> | number
  }

  export type commissionDuMoisOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    mom_service?: SortOrder
    debit?: SortOrder
    montant?: SortOrder
    sold?: SortOrder
  }

  export type commissionDuMoisWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: commissionDuMoisWhereInput | commissionDuMoisWhereInput[]
    OR?: commissionDuMoisWhereInput[]
    NOT?: commissionDuMoisWhereInput | commissionDuMoisWhereInput[]
    date?: DateTimeFilter<"commissionDuMois"> | Date | string
    mom_service?: EnumnomServiceFilter<"commissionDuMois"> | $Enums.nomService
    debit?: IntFilter<"commissionDuMois"> | number
    montant?: IntFilter<"commissionDuMois"> | number
    sold?: IntFilter<"commissionDuMois"> | number
  }, "id">

  export type commissionDuMoisOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    mom_service?: SortOrder
    debit?: SortOrder
    montant?: SortOrder
    sold?: SortOrder
    _count?: commissionDuMoisCountOrderByAggregateInput
    _avg?: commissionDuMoisAvgOrderByAggregateInput
    _max?: commissionDuMoisMaxOrderByAggregateInput
    _min?: commissionDuMoisMinOrderByAggregateInput
    _sum?: commissionDuMoisSumOrderByAggregateInput
  }

  export type commissionDuMoisScalarWhereWithAggregatesInput = {
    AND?: commissionDuMoisScalarWhereWithAggregatesInput | commissionDuMoisScalarWhereWithAggregatesInput[]
    OR?: commissionDuMoisScalarWhereWithAggregatesInput[]
    NOT?: commissionDuMoisScalarWhereWithAggregatesInput | commissionDuMoisScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"commissionDuMois"> | number
    date?: DateTimeWithAggregatesFilter<"commissionDuMois"> | Date | string
    mom_service?: EnumnomServiceWithAggregatesFilter<"commissionDuMois"> | $Enums.nomService
    debit?: IntWithAggregatesFilter<"commissionDuMois"> | number
    montant?: IntWithAggregatesFilter<"commissionDuMois"> | number
    sold?: IntWithAggregatesFilter<"commissionDuMois"> | number
  }

  export type creditEntrepriseWhereInput = {
    AND?: creditEntrepriseWhereInput | creditEntrepriseWhereInput[]
    OR?: creditEntrepriseWhereInput[]
    NOT?: creditEntrepriseWhereInput | creditEntrepriseWhereInput[]
    id?: IntFilter<"creditEntreprise"> | number
    date?: DateTimeFilter<"creditEntreprise"> | Date | string
    nomClient?: StringFilter<"creditEntreprise"> | string
    prenomClient?: StringFilter<"creditEntreprise"> | string
    motif?: StringFilter<"creditEntreprise"> | string
    montant?: IntFilter<"creditEntreprise"> | number
    montant_paye?: IntFilter<"creditEntreprise"> | number
    montant_restant?: IntFilter<"creditEntreprise"> | number
    solde?: IntFilter<"creditEntreprise"> | number
  }

  export type creditEntrepriseOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    nomClient?: SortOrder
    prenomClient?: SortOrder
    motif?: SortOrder
    montant?: SortOrder
    montant_paye?: SortOrder
    montant_restant?: SortOrder
    solde?: SortOrder
  }

  export type creditEntrepriseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: creditEntrepriseWhereInput | creditEntrepriseWhereInput[]
    OR?: creditEntrepriseWhereInput[]
    NOT?: creditEntrepriseWhereInput | creditEntrepriseWhereInput[]
    date?: DateTimeFilter<"creditEntreprise"> | Date | string
    nomClient?: StringFilter<"creditEntreprise"> | string
    prenomClient?: StringFilter<"creditEntreprise"> | string
    motif?: StringFilter<"creditEntreprise"> | string
    montant?: IntFilter<"creditEntreprise"> | number
    montant_paye?: IntFilter<"creditEntreprise"> | number
    montant_restant?: IntFilter<"creditEntreprise"> | number
    solde?: IntFilter<"creditEntreprise"> | number
  }, "id">

  export type creditEntrepriseOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    nomClient?: SortOrder
    prenomClient?: SortOrder
    motif?: SortOrder
    montant?: SortOrder
    montant_paye?: SortOrder
    montant_restant?: SortOrder
    solde?: SortOrder
    _count?: creditEntrepriseCountOrderByAggregateInput
    _avg?: creditEntrepriseAvgOrderByAggregateInput
    _max?: creditEntrepriseMaxOrderByAggregateInput
    _min?: creditEntrepriseMinOrderByAggregateInput
    _sum?: creditEntrepriseSumOrderByAggregateInput
  }

  export type creditEntrepriseScalarWhereWithAggregatesInput = {
    AND?: creditEntrepriseScalarWhereWithAggregatesInput | creditEntrepriseScalarWhereWithAggregatesInput[]
    OR?: creditEntrepriseScalarWhereWithAggregatesInput[]
    NOT?: creditEntrepriseScalarWhereWithAggregatesInput | creditEntrepriseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"creditEntreprise"> | number
    date?: DateTimeWithAggregatesFilter<"creditEntreprise"> | Date | string
    nomClient?: StringWithAggregatesFilter<"creditEntreprise"> | string
    prenomClient?: StringWithAggregatesFilter<"creditEntreprise"> | string
    motif?: StringWithAggregatesFilter<"creditEntreprise"> | string
    montant?: IntWithAggregatesFilter<"creditEntreprise"> | number
    montant_paye?: IntWithAggregatesFilter<"creditEntreprise"> | number
    montant_restant?: IntWithAggregatesFilter<"creditEntreprise"> | number
    solde?: IntWithAggregatesFilter<"creditEntreprise"> | number
  }

  export type prepayeeWhereInput = {
    AND?: prepayeeWhereInput | prepayeeWhereInput[]
    OR?: prepayeeWhereInput[]
    NOT?: prepayeeWhereInput | prepayeeWhereInput[]
    id?: IntFilter<"prepayee"> | number
    date?: DateTimeFilter<"prepayee"> | Date | string
    nom_client?: StringFilter<"prepayee"> | string
    montant_initial?: IntFilter<"prepayee"> | number
    montant_depense?: IntFilter<"prepayee"> | number
    montant_restant?: IntFilter<"prepayee"> | number
  }

  export type prepayeeOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    nom_client?: SortOrder
    montant_initial?: SortOrder
    montant_depense?: SortOrder
    montant_restant?: SortOrder
  }

  export type prepayeeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: prepayeeWhereInput | prepayeeWhereInput[]
    OR?: prepayeeWhereInput[]
    NOT?: prepayeeWhereInput | prepayeeWhereInput[]
    date?: DateTimeFilter<"prepayee"> | Date | string
    nom_client?: StringFilter<"prepayee"> | string
    montant_initial?: IntFilter<"prepayee"> | number
    montant_depense?: IntFilter<"prepayee"> | number
    montant_restant?: IntFilter<"prepayee"> | number
  }, "id">

  export type prepayeeOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    nom_client?: SortOrder
    montant_initial?: SortOrder
    montant_depense?: SortOrder
    montant_restant?: SortOrder
    _count?: prepayeeCountOrderByAggregateInput
    _avg?: prepayeeAvgOrderByAggregateInput
    _max?: prepayeeMaxOrderByAggregateInput
    _min?: prepayeeMinOrderByAggregateInput
    _sum?: prepayeeSumOrderByAggregateInput
  }

  export type prepayeeScalarWhereWithAggregatesInput = {
    AND?: prepayeeScalarWhereWithAggregatesInput | prepayeeScalarWhereWithAggregatesInput[]
    OR?: prepayeeScalarWhereWithAggregatesInput[]
    NOT?: prepayeeScalarWhereWithAggregatesInput | prepayeeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"prepayee"> | number
    date?: DateTimeWithAggregatesFilter<"prepayee"> | Date | string
    nom_client?: StringWithAggregatesFilter<"prepayee"> | string
    montant_initial?: IntWithAggregatesFilter<"prepayee"> | number
    montant_depense?: IntWithAggregatesFilter<"prepayee"> | number
    montant_restant?: IntWithAggregatesFilter<"prepayee"> | number
  }

  export type serviceEntrepriseWhereInput = {
    AND?: serviceEntrepriseWhereInput | serviceEntrepriseWhereInput[]
    OR?: serviceEntrepriseWhereInput[]
    NOT?: serviceEntrepriseWhereInput | serviceEntrepriseWhereInput[]
    id?: IntFilter<"serviceEntreprise"> | number
    date?: DateTimeFilter<"serviceEntreprise"> | Date | string
    mom_service?: EnumnomServiceFilter<"serviceEntreprise"> | $Enums.nomService
    solde_a_nouveau?: IntFilter<"serviceEntreprise"> | number
    montant_final?: IntFilter<"serviceEntreprise"> | number
    total?: IntFilter<"serviceEntreprise"> | number
  }

  export type serviceEntrepriseOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    mom_service?: SortOrder
    solde_a_nouveau?: SortOrder
    montant_final?: SortOrder
    total?: SortOrder
  }

  export type serviceEntrepriseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: serviceEntrepriseWhereInput | serviceEntrepriseWhereInput[]
    OR?: serviceEntrepriseWhereInput[]
    NOT?: serviceEntrepriseWhereInput | serviceEntrepriseWhereInput[]
    date?: DateTimeFilter<"serviceEntreprise"> | Date | string
    mom_service?: EnumnomServiceFilter<"serviceEntreprise"> | $Enums.nomService
    solde_a_nouveau?: IntFilter<"serviceEntreprise"> | number
    montant_final?: IntFilter<"serviceEntreprise"> | number
    total?: IntFilter<"serviceEntreprise"> | number
  }, "id">

  export type serviceEntrepriseOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    mom_service?: SortOrder
    solde_a_nouveau?: SortOrder
    montant_final?: SortOrder
    total?: SortOrder
    _count?: serviceEntrepriseCountOrderByAggregateInput
    _avg?: serviceEntrepriseAvgOrderByAggregateInput
    _max?: serviceEntrepriseMaxOrderByAggregateInput
    _min?: serviceEntrepriseMinOrderByAggregateInput
    _sum?: serviceEntrepriseSumOrderByAggregateInput
  }

  export type serviceEntrepriseScalarWhereWithAggregatesInput = {
    AND?: serviceEntrepriseScalarWhereWithAggregatesInput | serviceEntrepriseScalarWhereWithAggregatesInput[]
    OR?: serviceEntrepriseScalarWhereWithAggregatesInput[]
    NOT?: serviceEntrepriseScalarWhereWithAggregatesInput | serviceEntrepriseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"serviceEntreprise"> | number
    date?: DateTimeWithAggregatesFilter<"serviceEntreprise"> | Date | string
    mom_service?: EnumnomServiceWithAggregatesFilter<"serviceEntreprise"> | $Enums.nomService
    solde_a_nouveau?: IntWithAggregatesFilter<"serviceEntreprise"> | number
    montant_final?: IntWithAggregatesFilter<"serviceEntreprise"> | number
    total?: IntWithAggregatesFilter<"serviceEntreprise"> | number
  }

  export type transInternationWhereInput = {
    AND?: transInternationWhereInput | transInternationWhereInput[]
    OR?: transInternationWhereInput[]
    NOT?: transInternationWhereInput | transInternationWhereInput[]
    id?: IntFilter<"transInternation"> | number
    montant_initial?: IntFilter<"transInternation"> | number
    nom_service?: EnumtransInterFilter<"transInternation"> | $Enums.transInter
    montant_trans?: IntFilter<"transInternation"> | number
    montant_recus?: IntFilter<"transInternation"> | number
    date_debut?: DateTimeFilter<"transInternation"> | Date | string
    date_fin?: DateTimeFilter<"transInternation"> | Date | string
    soldes?: IntFilter<"transInternation"> | number
    Decouvert?: IntFilter<"transInternation"> | number
    crediut?: IntFilter<"transInternation"> | number
    debit_caisse?: IntFilter<"transInternation"> | number
    debit_BNDA?: IntFilter<"transInternation"> | number
  }

  export type transInternationOrderByWithRelationInput = {
    id?: SortOrder
    montant_initial?: SortOrder
    nom_service?: SortOrder
    montant_trans?: SortOrder
    montant_recus?: SortOrder
    date_debut?: SortOrder
    date_fin?: SortOrder
    soldes?: SortOrder
    Decouvert?: SortOrder
    crediut?: SortOrder
    debit_caisse?: SortOrder
    debit_BNDA?: SortOrder
  }

  export type transInternationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: transInternationWhereInput | transInternationWhereInput[]
    OR?: transInternationWhereInput[]
    NOT?: transInternationWhereInput | transInternationWhereInput[]
    montant_initial?: IntFilter<"transInternation"> | number
    nom_service?: EnumtransInterFilter<"transInternation"> | $Enums.transInter
    montant_trans?: IntFilter<"transInternation"> | number
    montant_recus?: IntFilter<"transInternation"> | number
    date_debut?: DateTimeFilter<"transInternation"> | Date | string
    date_fin?: DateTimeFilter<"transInternation"> | Date | string
    soldes?: IntFilter<"transInternation"> | number
    Decouvert?: IntFilter<"transInternation"> | number
    crediut?: IntFilter<"transInternation"> | number
    debit_caisse?: IntFilter<"transInternation"> | number
    debit_BNDA?: IntFilter<"transInternation"> | number
  }, "id">

  export type transInternationOrderByWithAggregationInput = {
    id?: SortOrder
    montant_initial?: SortOrder
    nom_service?: SortOrder
    montant_trans?: SortOrder
    montant_recus?: SortOrder
    date_debut?: SortOrder
    date_fin?: SortOrder
    soldes?: SortOrder
    Decouvert?: SortOrder
    crediut?: SortOrder
    debit_caisse?: SortOrder
    debit_BNDA?: SortOrder
    _count?: transInternationCountOrderByAggregateInput
    _avg?: transInternationAvgOrderByAggregateInput
    _max?: transInternationMaxOrderByAggregateInput
    _min?: transInternationMinOrderByAggregateInput
    _sum?: transInternationSumOrderByAggregateInput
  }

  export type transInternationScalarWhereWithAggregatesInput = {
    AND?: transInternationScalarWhereWithAggregatesInput | transInternationScalarWhereWithAggregatesInput[]
    OR?: transInternationScalarWhereWithAggregatesInput[]
    NOT?: transInternationScalarWhereWithAggregatesInput | transInternationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"transInternation"> | number
    montant_initial?: IntWithAggregatesFilter<"transInternation"> | number
    nom_service?: EnumtransInterWithAggregatesFilter<"transInternation"> | $Enums.transInter
    montant_trans?: IntWithAggregatesFilter<"transInternation"> | number
    montant_recus?: IntWithAggregatesFilter<"transInternation"> | number
    date_debut?: DateTimeWithAggregatesFilter<"transInternation"> | Date | string
    date_fin?: DateTimeWithAggregatesFilter<"transInternation"> | Date | string
    soldes?: IntWithAggregatesFilter<"transInternation"> | number
    Decouvert?: IntWithAggregatesFilter<"transInternation"> | number
    crediut?: IntWithAggregatesFilter<"transInternation"> | number
    debit_caisse?: IntWithAggregatesFilter<"transInternation"> | number
    debit_BNDA?: IntWithAggregatesFilter<"transInternation"> | number
  }

  export type uvAbonnementWhereInput = {
    AND?: uvAbonnementWhereInput | uvAbonnementWhereInput[]
    OR?: uvAbonnementWhereInput[]
    NOT?: uvAbonnementWhereInput | uvAbonnementWhereInput[]
    id?: IntFilter<"uvAbonnement"> | number
    date?: DateTimeFilter<"uvAbonnement"> | Date | string
    produit?: EnumuvTeleFilter<"uvAbonnement"> | $Enums.uvTele
    montant?: IntFilter<"uvAbonnement"> | number
  }

  export type uvAbonnementOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    produit?: SortOrder
    montant?: SortOrder
  }

  export type uvAbonnementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: uvAbonnementWhereInput | uvAbonnementWhereInput[]
    OR?: uvAbonnementWhereInput[]
    NOT?: uvAbonnementWhereInput | uvAbonnementWhereInput[]
    date?: DateTimeFilter<"uvAbonnement"> | Date | string
    produit?: EnumuvTeleFilter<"uvAbonnement"> | $Enums.uvTele
    montant?: IntFilter<"uvAbonnement"> | number
  }, "id">

  export type uvAbonnementOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    produit?: SortOrder
    montant?: SortOrder
    _count?: uvAbonnementCountOrderByAggregateInput
    _avg?: uvAbonnementAvgOrderByAggregateInput
    _max?: uvAbonnementMaxOrderByAggregateInput
    _min?: uvAbonnementMinOrderByAggregateInput
    _sum?: uvAbonnementSumOrderByAggregateInput
  }

  export type uvAbonnementScalarWhereWithAggregatesInput = {
    AND?: uvAbonnementScalarWhereWithAggregatesInput | uvAbonnementScalarWhereWithAggregatesInput[]
    OR?: uvAbonnementScalarWhereWithAggregatesInput[]
    NOT?: uvAbonnementScalarWhereWithAggregatesInput | uvAbonnementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"uvAbonnement"> | number
    date?: DateTimeWithAggregatesFilter<"uvAbonnement"> | Date | string
    produit?: EnumuvTeleWithAggregatesFilter<"uvAbonnement"> | $Enums.uvTele
    montant?: IntWithAggregatesFilter<"uvAbonnement"> | number
  }

  export type caisseWhereInput = {
    AND?: caisseWhereInput | caisseWhereInput[]
    OR?: caisseWhereInput[]
    NOT?: caisseWhereInput | caisseWhereInput[]
    id?: IntFilter<"caisse"> | number
    date?: DateTimeFilter<"caisse"> | Date | string
    service?: EnumnomServiceFilter<"caisse"> | $Enums.nomService
    stock_initial?: IntFilter<"caisse"> | number
    stock_final?: IntFilter<"caisse"> | number
    montant_total?: IntFilter<"caisse"> | number
    solde?: IntFilter<"caisse"> | number
  }

  export type caisseOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    service?: SortOrder
    stock_initial?: SortOrder
    stock_final?: SortOrder
    montant_total?: SortOrder
    solde?: SortOrder
  }

  export type caisseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: caisseWhereInput | caisseWhereInput[]
    OR?: caisseWhereInput[]
    NOT?: caisseWhereInput | caisseWhereInput[]
    date?: DateTimeFilter<"caisse"> | Date | string
    service?: EnumnomServiceFilter<"caisse"> | $Enums.nomService
    stock_initial?: IntFilter<"caisse"> | number
    stock_final?: IntFilter<"caisse"> | number
    montant_total?: IntFilter<"caisse"> | number
    solde?: IntFilter<"caisse"> | number
  }, "id">

  export type caisseOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    service?: SortOrder
    stock_initial?: SortOrder
    stock_final?: SortOrder
    montant_total?: SortOrder
    solde?: SortOrder
    _count?: caisseCountOrderByAggregateInput
    _avg?: caisseAvgOrderByAggregateInput
    _max?: caisseMaxOrderByAggregateInput
    _min?: caisseMinOrderByAggregateInput
    _sum?: caisseSumOrderByAggregateInput
  }

  export type caisseScalarWhereWithAggregatesInput = {
    AND?: caisseScalarWhereWithAggregatesInput | caisseScalarWhereWithAggregatesInput[]
    OR?: caisseScalarWhereWithAggregatesInput[]
    NOT?: caisseScalarWhereWithAggregatesInput | caisseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"caisse"> | number
    date?: DateTimeWithAggregatesFilter<"caisse"> | Date | string
    service?: EnumnomServiceWithAggregatesFilter<"caisse"> | $Enums.nomService
    stock_initial?: IntWithAggregatesFilter<"caisse"> | number
    stock_final?: IntWithAggregatesFilter<"caisse"> | number
    montant_total?: IntWithAggregatesFilter<"caisse"> | number
    solde?: IntWithAggregatesFilter<"caisse"> | number
  }

  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    id?: IntFilter<"Profile"> | number
    bio?: StringNullableFilter<"Profile"> | string | null
    userId?: IntFilter<"Profile"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    bio?: SortOrderInput | SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    bio?: StringNullableFilter<"Profile"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    bio?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _avg?: ProfileAvgOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
    _sum?: ProfileSumOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Profile"> | number
    bio?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    userId?: IntWithAggregatesFilter<"Profile"> | number
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    profile?: XOR<ProfileNullableRelationFilter, ProfileWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    profile?: ProfileOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    profile?: XOR<ProfileNullableRelationFilter, ProfileWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type clientCanalCreateInput = {
    nom: string
    prenom: string
    telephone: string
    numAbonne: bigint | number
    finAbonn: Date | string
  }

  export type clientCanalUncheckedCreateInput = {
    id?: number
    nom: string
    prenom: string
    telephone: string
    numAbonne: bigint | number
    finAbonn: Date | string
  }

  export type clientCanalUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    numAbonne?: BigIntFieldUpdateOperationsInput | bigint | number
    finAbonn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type clientCanalUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    numAbonne?: BigIntFieldUpdateOperationsInput | bigint | number
    finAbonn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type clientCanalCreateManyInput = {
    id?: number
    nom: string
    prenom: string
    telephone: string
    numAbonne: bigint | number
    finAbonn: Date | string
  }

  export type clientCanalUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    numAbonne?: BigIntFieldUpdateOperationsInput | bigint | number
    finAbonn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type clientCanalUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    numAbonne?: BigIntFieldUpdateOperationsInput | bigint | number
    finAbonn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type commissionDuMoisCreateInput = {
    date: Date | string
    mom_service?: $Enums.nomService
    debit: number
    montant: number
    sold: number
  }

  export type commissionDuMoisUncheckedCreateInput = {
    id?: number
    date: Date | string
    mom_service?: $Enums.nomService
    debit: number
    montant: number
    sold: number
  }

  export type commissionDuMoisUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mom_service?: EnumnomServiceFieldUpdateOperationsInput | $Enums.nomService
    debit?: IntFieldUpdateOperationsInput | number
    montant?: IntFieldUpdateOperationsInput | number
    sold?: IntFieldUpdateOperationsInput | number
  }

  export type commissionDuMoisUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mom_service?: EnumnomServiceFieldUpdateOperationsInput | $Enums.nomService
    debit?: IntFieldUpdateOperationsInput | number
    montant?: IntFieldUpdateOperationsInput | number
    sold?: IntFieldUpdateOperationsInput | number
  }

  export type commissionDuMoisCreateManyInput = {
    id?: number
    date: Date | string
    mom_service?: $Enums.nomService
    debit: number
    montant: number
    sold: number
  }

  export type commissionDuMoisUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mom_service?: EnumnomServiceFieldUpdateOperationsInput | $Enums.nomService
    debit?: IntFieldUpdateOperationsInput | number
    montant?: IntFieldUpdateOperationsInput | number
    sold?: IntFieldUpdateOperationsInput | number
  }

  export type commissionDuMoisUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mom_service?: EnumnomServiceFieldUpdateOperationsInput | $Enums.nomService
    debit?: IntFieldUpdateOperationsInput | number
    montant?: IntFieldUpdateOperationsInput | number
    sold?: IntFieldUpdateOperationsInput | number
  }

  export type creditEntrepriseCreateInput = {
    date: Date | string
    nomClient: string
    prenomClient: string
    motif: string
    montant: number
    montant_paye: number
    montant_restant: number
    solde: number
  }

  export type creditEntrepriseUncheckedCreateInput = {
    id?: number
    date: Date | string
    nomClient: string
    prenomClient: string
    motif: string
    montant: number
    montant_paye: number
    montant_restant: number
    solde: number
  }

  export type creditEntrepriseUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    nomClient?: StringFieldUpdateOperationsInput | string
    prenomClient?: StringFieldUpdateOperationsInput | string
    motif?: StringFieldUpdateOperationsInput | string
    montant?: IntFieldUpdateOperationsInput | number
    montant_paye?: IntFieldUpdateOperationsInput | number
    montant_restant?: IntFieldUpdateOperationsInput | number
    solde?: IntFieldUpdateOperationsInput | number
  }

  export type creditEntrepriseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    nomClient?: StringFieldUpdateOperationsInput | string
    prenomClient?: StringFieldUpdateOperationsInput | string
    motif?: StringFieldUpdateOperationsInput | string
    montant?: IntFieldUpdateOperationsInput | number
    montant_paye?: IntFieldUpdateOperationsInput | number
    montant_restant?: IntFieldUpdateOperationsInput | number
    solde?: IntFieldUpdateOperationsInput | number
  }

  export type creditEntrepriseCreateManyInput = {
    id?: number
    date: Date | string
    nomClient: string
    prenomClient: string
    motif: string
    montant: number
    montant_paye: number
    montant_restant: number
    solde: number
  }

  export type creditEntrepriseUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    nomClient?: StringFieldUpdateOperationsInput | string
    prenomClient?: StringFieldUpdateOperationsInput | string
    motif?: StringFieldUpdateOperationsInput | string
    montant?: IntFieldUpdateOperationsInput | number
    montant_paye?: IntFieldUpdateOperationsInput | number
    montant_restant?: IntFieldUpdateOperationsInput | number
    solde?: IntFieldUpdateOperationsInput | number
  }

  export type creditEntrepriseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    nomClient?: StringFieldUpdateOperationsInput | string
    prenomClient?: StringFieldUpdateOperationsInput | string
    motif?: StringFieldUpdateOperationsInput | string
    montant?: IntFieldUpdateOperationsInput | number
    montant_paye?: IntFieldUpdateOperationsInput | number
    montant_restant?: IntFieldUpdateOperationsInput | number
    solde?: IntFieldUpdateOperationsInput | number
  }

  export type prepayeeCreateInput = {
    date: Date | string
    nom_client: string
    montant_initial: number
    montant_depense: number
    montant_restant: number
  }

  export type prepayeeUncheckedCreateInput = {
    id?: number
    date: Date | string
    nom_client: string
    montant_initial: number
    montant_depense: number
    montant_restant: number
  }

  export type prepayeeUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    nom_client?: StringFieldUpdateOperationsInput | string
    montant_initial?: IntFieldUpdateOperationsInput | number
    montant_depense?: IntFieldUpdateOperationsInput | number
    montant_restant?: IntFieldUpdateOperationsInput | number
  }

  export type prepayeeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    nom_client?: StringFieldUpdateOperationsInput | string
    montant_initial?: IntFieldUpdateOperationsInput | number
    montant_depense?: IntFieldUpdateOperationsInput | number
    montant_restant?: IntFieldUpdateOperationsInput | number
  }

  export type prepayeeCreateManyInput = {
    id?: number
    date: Date | string
    nom_client: string
    montant_initial: number
    montant_depense: number
    montant_restant: number
  }

  export type prepayeeUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    nom_client?: StringFieldUpdateOperationsInput | string
    montant_initial?: IntFieldUpdateOperationsInput | number
    montant_depense?: IntFieldUpdateOperationsInput | number
    montant_restant?: IntFieldUpdateOperationsInput | number
  }

  export type prepayeeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    nom_client?: StringFieldUpdateOperationsInput | string
    montant_initial?: IntFieldUpdateOperationsInput | number
    montant_depense?: IntFieldUpdateOperationsInput | number
    montant_restant?: IntFieldUpdateOperationsInput | number
  }

  export type serviceEntrepriseCreateInput = {
    date: Date | string
    mom_service?: $Enums.nomService
    solde_a_nouveau: number
    montant_final: number
    total: number
  }

  export type serviceEntrepriseUncheckedCreateInput = {
    id?: number
    date: Date | string
    mom_service?: $Enums.nomService
    solde_a_nouveau: number
    montant_final: number
    total: number
  }

  export type serviceEntrepriseUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mom_service?: EnumnomServiceFieldUpdateOperationsInput | $Enums.nomService
    solde_a_nouveau?: IntFieldUpdateOperationsInput | number
    montant_final?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
  }

  export type serviceEntrepriseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mom_service?: EnumnomServiceFieldUpdateOperationsInput | $Enums.nomService
    solde_a_nouveau?: IntFieldUpdateOperationsInput | number
    montant_final?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
  }

  export type serviceEntrepriseCreateManyInput = {
    id?: number
    date: Date | string
    mom_service?: $Enums.nomService
    solde_a_nouveau: number
    montant_final: number
    total: number
  }

  export type serviceEntrepriseUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mom_service?: EnumnomServiceFieldUpdateOperationsInput | $Enums.nomService
    solde_a_nouveau?: IntFieldUpdateOperationsInput | number
    montant_final?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
  }

  export type serviceEntrepriseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mom_service?: EnumnomServiceFieldUpdateOperationsInput | $Enums.nomService
    solde_a_nouveau?: IntFieldUpdateOperationsInput | number
    montant_final?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
  }

  export type transInternationCreateInput = {
    montant_initial: number
    nom_service?: $Enums.transInter
    montant_trans: number
    montant_recus: number
    date_debut: Date | string
    date_fin: Date | string
    soldes: number
    Decouvert: number
    crediut: number
    debit_caisse: number
    debit_BNDA: number
  }

  export type transInternationUncheckedCreateInput = {
    id?: number
    montant_initial: number
    nom_service?: $Enums.transInter
    montant_trans: number
    montant_recus: number
    date_debut: Date | string
    date_fin: Date | string
    soldes: number
    Decouvert: number
    crediut: number
    debit_caisse: number
    debit_BNDA: number
  }

  export type transInternationUpdateInput = {
    montant_initial?: IntFieldUpdateOperationsInput | number
    nom_service?: EnumtransInterFieldUpdateOperationsInput | $Enums.transInter
    montant_trans?: IntFieldUpdateOperationsInput | number
    montant_recus?: IntFieldUpdateOperationsInput | number
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    date_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    soldes?: IntFieldUpdateOperationsInput | number
    Decouvert?: IntFieldUpdateOperationsInput | number
    crediut?: IntFieldUpdateOperationsInput | number
    debit_caisse?: IntFieldUpdateOperationsInput | number
    debit_BNDA?: IntFieldUpdateOperationsInput | number
  }

  export type transInternationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    montant_initial?: IntFieldUpdateOperationsInput | number
    nom_service?: EnumtransInterFieldUpdateOperationsInput | $Enums.transInter
    montant_trans?: IntFieldUpdateOperationsInput | number
    montant_recus?: IntFieldUpdateOperationsInput | number
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    date_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    soldes?: IntFieldUpdateOperationsInput | number
    Decouvert?: IntFieldUpdateOperationsInput | number
    crediut?: IntFieldUpdateOperationsInput | number
    debit_caisse?: IntFieldUpdateOperationsInput | number
    debit_BNDA?: IntFieldUpdateOperationsInput | number
  }

  export type transInternationCreateManyInput = {
    id?: number
    montant_initial: number
    nom_service?: $Enums.transInter
    montant_trans: number
    montant_recus: number
    date_debut: Date | string
    date_fin: Date | string
    soldes: number
    Decouvert: number
    crediut: number
    debit_caisse: number
    debit_BNDA: number
  }

  export type transInternationUpdateManyMutationInput = {
    montant_initial?: IntFieldUpdateOperationsInput | number
    nom_service?: EnumtransInterFieldUpdateOperationsInput | $Enums.transInter
    montant_trans?: IntFieldUpdateOperationsInput | number
    montant_recus?: IntFieldUpdateOperationsInput | number
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    date_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    soldes?: IntFieldUpdateOperationsInput | number
    Decouvert?: IntFieldUpdateOperationsInput | number
    crediut?: IntFieldUpdateOperationsInput | number
    debit_caisse?: IntFieldUpdateOperationsInput | number
    debit_BNDA?: IntFieldUpdateOperationsInput | number
  }

  export type transInternationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    montant_initial?: IntFieldUpdateOperationsInput | number
    nom_service?: EnumtransInterFieldUpdateOperationsInput | $Enums.transInter
    montant_trans?: IntFieldUpdateOperationsInput | number
    montant_recus?: IntFieldUpdateOperationsInput | number
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    date_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    soldes?: IntFieldUpdateOperationsInput | number
    Decouvert?: IntFieldUpdateOperationsInput | number
    crediut?: IntFieldUpdateOperationsInput | number
    debit_caisse?: IntFieldUpdateOperationsInput | number
    debit_BNDA?: IntFieldUpdateOperationsInput | number
  }

  export type uvAbonnementCreateInput = {
    date: Date | string
    produit?: $Enums.uvTele
    montant: number
  }

  export type uvAbonnementUncheckedCreateInput = {
    id?: number
    date: Date | string
    produit?: $Enums.uvTele
    montant: number
  }

  export type uvAbonnementUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    produit?: EnumuvTeleFieldUpdateOperationsInput | $Enums.uvTele
    montant?: IntFieldUpdateOperationsInput | number
  }

  export type uvAbonnementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    produit?: EnumuvTeleFieldUpdateOperationsInput | $Enums.uvTele
    montant?: IntFieldUpdateOperationsInput | number
  }

  export type uvAbonnementCreateManyInput = {
    id?: number
    date: Date | string
    produit?: $Enums.uvTele
    montant: number
  }

  export type uvAbonnementUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    produit?: EnumuvTeleFieldUpdateOperationsInput | $Enums.uvTele
    montant?: IntFieldUpdateOperationsInput | number
  }

  export type uvAbonnementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    produit?: EnumuvTeleFieldUpdateOperationsInput | $Enums.uvTele
    montant?: IntFieldUpdateOperationsInput | number
  }

  export type caisseCreateInput = {
    date: Date | string
    service: $Enums.nomService
    stock_initial: number
    stock_final: number
    montant_total: number
    solde: number
  }

  export type caisseUncheckedCreateInput = {
    id?: number
    date: Date | string
    service: $Enums.nomService
    stock_initial: number
    stock_final: number
    montant_total: number
    solde: number
  }

  export type caisseUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: EnumnomServiceFieldUpdateOperationsInput | $Enums.nomService
    stock_initial?: IntFieldUpdateOperationsInput | number
    stock_final?: IntFieldUpdateOperationsInput | number
    montant_total?: IntFieldUpdateOperationsInput | number
    solde?: IntFieldUpdateOperationsInput | number
  }

  export type caisseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: EnumnomServiceFieldUpdateOperationsInput | $Enums.nomService
    stock_initial?: IntFieldUpdateOperationsInput | number
    stock_final?: IntFieldUpdateOperationsInput | number
    montant_total?: IntFieldUpdateOperationsInput | number
    solde?: IntFieldUpdateOperationsInput | number
  }

  export type caisseCreateManyInput = {
    id?: number
    date: Date | string
    service: $Enums.nomService
    stock_initial: number
    stock_final: number
    montant_total: number
    solde: number
  }

  export type caisseUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: EnumnomServiceFieldUpdateOperationsInput | $Enums.nomService
    stock_initial?: IntFieldUpdateOperationsInput | number
    stock_final?: IntFieldUpdateOperationsInput | number
    montant_total?: IntFieldUpdateOperationsInput | number
    solde?: IntFieldUpdateOperationsInput | number
  }

  export type caisseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: EnumnomServiceFieldUpdateOperationsInput | $Enums.nomService
    stock_initial?: IntFieldUpdateOperationsInput | number
    stock_final?: IntFieldUpdateOperationsInput | number
    montant_total?: IntFieldUpdateOperationsInput | number
    solde?: IntFieldUpdateOperationsInput | number
  }

  export type ProfileCreateInput = {
    bio?: string | null
    user: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: number
    bio?: string | null
    userId: number
  }

  export type ProfileUpdateInput = {
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ProfileCreateManyInput = {
    id?: number
    bio?: string | null
    userId: number
  }

  export type ProfileUpdateManyMutationInput = {
    bio?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    email: string
    name?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    name?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    name?: string | null
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type clientCanalCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    telephone?: SortOrder
    numAbonne?: SortOrder
    finAbonn?: SortOrder
  }

  export type clientCanalAvgOrderByAggregateInput = {
    id?: SortOrder
    numAbonne?: SortOrder
  }

  export type clientCanalMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    telephone?: SortOrder
    numAbonne?: SortOrder
    finAbonn?: SortOrder
  }

  export type clientCanalMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    telephone?: SortOrder
    numAbonne?: SortOrder
    finAbonn?: SortOrder
  }

  export type clientCanalSumOrderByAggregateInput = {
    id?: SortOrder
    numAbonne?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumnomServiceFilter<$PrismaModel = never> = {
    equals?: $Enums.nomService | EnumnomServiceFieldRefInput<$PrismaModel>
    in?: $Enums.nomService[]
    notIn?: $Enums.nomService[]
    not?: NestedEnumnomServiceFilter<$PrismaModel> | $Enums.nomService
  }

  export type commissionDuMoisCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    mom_service?: SortOrder
    debit?: SortOrder
    montant?: SortOrder
    sold?: SortOrder
  }

  export type commissionDuMoisAvgOrderByAggregateInput = {
    id?: SortOrder
    debit?: SortOrder
    montant?: SortOrder
    sold?: SortOrder
  }

  export type commissionDuMoisMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    mom_service?: SortOrder
    debit?: SortOrder
    montant?: SortOrder
    sold?: SortOrder
  }

  export type commissionDuMoisMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    mom_service?: SortOrder
    debit?: SortOrder
    montant?: SortOrder
    sold?: SortOrder
  }

  export type commissionDuMoisSumOrderByAggregateInput = {
    id?: SortOrder
    debit?: SortOrder
    montant?: SortOrder
    sold?: SortOrder
  }

  export type EnumnomServiceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.nomService | EnumnomServiceFieldRefInput<$PrismaModel>
    in?: $Enums.nomService[]
    notIn?: $Enums.nomService[]
    not?: NestedEnumnomServiceWithAggregatesFilter<$PrismaModel> | $Enums.nomService
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumnomServiceFilter<$PrismaModel>
    _max?: NestedEnumnomServiceFilter<$PrismaModel>
  }

  export type creditEntrepriseCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    nomClient?: SortOrder
    prenomClient?: SortOrder
    motif?: SortOrder
    montant?: SortOrder
    montant_paye?: SortOrder
    montant_restant?: SortOrder
    solde?: SortOrder
  }

  export type creditEntrepriseAvgOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    montant_paye?: SortOrder
    montant_restant?: SortOrder
    solde?: SortOrder
  }

  export type creditEntrepriseMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    nomClient?: SortOrder
    prenomClient?: SortOrder
    motif?: SortOrder
    montant?: SortOrder
    montant_paye?: SortOrder
    montant_restant?: SortOrder
    solde?: SortOrder
  }

  export type creditEntrepriseMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    nomClient?: SortOrder
    prenomClient?: SortOrder
    motif?: SortOrder
    montant?: SortOrder
    montant_paye?: SortOrder
    montant_restant?: SortOrder
    solde?: SortOrder
  }

  export type creditEntrepriseSumOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    montant_paye?: SortOrder
    montant_restant?: SortOrder
    solde?: SortOrder
  }

  export type prepayeeCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    nom_client?: SortOrder
    montant_initial?: SortOrder
    montant_depense?: SortOrder
    montant_restant?: SortOrder
  }

  export type prepayeeAvgOrderByAggregateInput = {
    id?: SortOrder
    montant_initial?: SortOrder
    montant_depense?: SortOrder
    montant_restant?: SortOrder
  }

  export type prepayeeMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    nom_client?: SortOrder
    montant_initial?: SortOrder
    montant_depense?: SortOrder
    montant_restant?: SortOrder
  }

  export type prepayeeMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    nom_client?: SortOrder
    montant_initial?: SortOrder
    montant_depense?: SortOrder
    montant_restant?: SortOrder
  }

  export type prepayeeSumOrderByAggregateInput = {
    id?: SortOrder
    montant_initial?: SortOrder
    montant_depense?: SortOrder
    montant_restant?: SortOrder
  }

  export type serviceEntrepriseCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    mom_service?: SortOrder
    solde_a_nouveau?: SortOrder
    montant_final?: SortOrder
    total?: SortOrder
  }

  export type serviceEntrepriseAvgOrderByAggregateInput = {
    id?: SortOrder
    solde_a_nouveau?: SortOrder
    montant_final?: SortOrder
    total?: SortOrder
  }

  export type serviceEntrepriseMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    mom_service?: SortOrder
    solde_a_nouveau?: SortOrder
    montant_final?: SortOrder
    total?: SortOrder
  }

  export type serviceEntrepriseMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    mom_service?: SortOrder
    solde_a_nouveau?: SortOrder
    montant_final?: SortOrder
    total?: SortOrder
  }

  export type serviceEntrepriseSumOrderByAggregateInput = {
    id?: SortOrder
    solde_a_nouveau?: SortOrder
    montant_final?: SortOrder
    total?: SortOrder
  }

  export type EnumtransInterFilter<$PrismaModel = never> = {
    equals?: $Enums.transInter | EnumtransInterFieldRefInput<$PrismaModel>
    in?: $Enums.transInter[]
    notIn?: $Enums.transInter[]
    not?: NestedEnumtransInterFilter<$PrismaModel> | $Enums.transInter
  }

  export type transInternationCountOrderByAggregateInput = {
    id?: SortOrder
    montant_initial?: SortOrder
    nom_service?: SortOrder
    montant_trans?: SortOrder
    montant_recus?: SortOrder
    date_debut?: SortOrder
    date_fin?: SortOrder
    soldes?: SortOrder
    Decouvert?: SortOrder
    crediut?: SortOrder
    debit_caisse?: SortOrder
    debit_BNDA?: SortOrder
  }

  export type transInternationAvgOrderByAggregateInput = {
    id?: SortOrder
    montant_initial?: SortOrder
    montant_trans?: SortOrder
    montant_recus?: SortOrder
    soldes?: SortOrder
    Decouvert?: SortOrder
    crediut?: SortOrder
    debit_caisse?: SortOrder
    debit_BNDA?: SortOrder
  }

  export type transInternationMaxOrderByAggregateInput = {
    id?: SortOrder
    montant_initial?: SortOrder
    nom_service?: SortOrder
    montant_trans?: SortOrder
    montant_recus?: SortOrder
    date_debut?: SortOrder
    date_fin?: SortOrder
    soldes?: SortOrder
    Decouvert?: SortOrder
    crediut?: SortOrder
    debit_caisse?: SortOrder
    debit_BNDA?: SortOrder
  }

  export type transInternationMinOrderByAggregateInput = {
    id?: SortOrder
    montant_initial?: SortOrder
    nom_service?: SortOrder
    montant_trans?: SortOrder
    montant_recus?: SortOrder
    date_debut?: SortOrder
    date_fin?: SortOrder
    soldes?: SortOrder
    Decouvert?: SortOrder
    crediut?: SortOrder
    debit_caisse?: SortOrder
    debit_BNDA?: SortOrder
  }

  export type transInternationSumOrderByAggregateInput = {
    id?: SortOrder
    montant_initial?: SortOrder
    montant_trans?: SortOrder
    montant_recus?: SortOrder
    soldes?: SortOrder
    Decouvert?: SortOrder
    crediut?: SortOrder
    debit_caisse?: SortOrder
    debit_BNDA?: SortOrder
  }

  export type EnumtransInterWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.transInter | EnumtransInterFieldRefInput<$PrismaModel>
    in?: $Enums.transInter[]
    notIn?: $Enums.transInter[]
    not?: NestedEnumtransInterWithAggregatesFilter<$PrismaModel> | $Enums.transInter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumtransInterFilter<$PrismaModel>
    _max?: NestedEnumtransInterFilter<$PrismaModel>
  }

  export type EnumuvTeleFilter<$PrismaModel = never> = {
    equals?: $Enums.uvTele | EnumuvTeleFieldRefInput<$PrismaModel>
    in?: $Enums.uvTele[]
    notIn?: $Enums.uvTele[]
    not?: NestedEnumuvTeleFilter<$PrismaModel> | $Enums.uvTele
  }

  export type uvAbonnementCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    produit?: SortOrder
    montant?: SortOrder
  }

  export type uvAbonnementAvgOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
  }

  export type uvAbonnementMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    produit?: SortOrder
    montant?: SortOrder
  }

  export type uvAbonnementMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    produit?: SortOrder
    montant?: SortOrder
  }

  export type uvAbonnementSumOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
  }

  export type EnumuvTeleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.uvTele | EnumuvTeleFieldRefInput<$PrismaModel>
    in?: $Enums.uvTele[]
    notIn?: $Enums.uvTele[]
    not?: NestedEnumuvTeleWithAggregatesFilter<$PrismaModel> | $Enums.uvTele
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuvTeleFilter<$PrismaModel>
    _max?: NestedEnumuvTeleFilter<$PrismaModel>
  }

  export type caisseCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    service?: SortOrder
    stock_initial?: SortOrder
    stock_final?: SortOrder
    montant_total?: SortOrder
    solde?: SortOrder
  }

  export type caisseAvgOrderByAggregateInput = {
    id?: SortOrder
    stock_initial?: SortOrder
    stock_final?: SortOrder
    montant_total?: SortOrder
    solde?: SortOrder
  }

  export type caisseMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    service?: SortOrder
    stock_initial?: SortOrder
    stock_final?: SortOrder
    montant_total?: SortOrder
    solde?: SortOrder
  }

  export type caisseMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    service?: SortOrder
    stock_initial?: SortOrder
    stock_final?: SortOrder
    montant_total?: SortOrder
    solde?: SortOrder
  }

  export type caisseSumOrderByAggregateInput = {
    id?: SortOrder
    stock_initial?: SortOrder
    stock_final?: SortOrder
    montant_total?: SortOrder
    solde?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    bio?: SortOrder
    userId?: SortOrder
  }

  export type ProfileAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    bio?: SortOrder
    userId?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    bio?: SortOrder
    userId?: SortOrder
  }

  export type ProfileSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type ProfileNullableRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumnomServiceFieldUpdateOperationsInput = {
    set?: $Enums.nomService
  }

  export type EnumtransInterFieldUpdateOperationsInput = {
    set?: $Enums.transInter
  }

  export type EnumuvTeleFieldUpdateOperationsInput = {
    set?: $Enums.uvTele
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfileInput, UserUpdateWithoutProfileInput>, UserUncheckedUpdateWithoutProfileInput>
  }

  export type ProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumnomServiceFilter<$PrismaModel = never> = {
    equals?: $Enums.nomService | EnumnomServiceFieldRefInput<$PrismaModel>
    in?: $Enums.nomService[]
    notIn?: $Enums.nomService[]
    not?: NestedEnumnomServiceFilter<$PrismaModel> | $Enums.nomService
  }

  export type NestedEnumnomServiceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.nomService | EnumnomServiceFieldRefInput<$PrismaModel>
    in?: $Enums.nomService[]
    notIn?: $Enums.nomService[]
    not?: NestedEnumnomServiceWithAggregatesFilter<$PrismaModel> | $Enums.nomService
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumnomServiceFilter<$PrismaModel>
    _max?: NestedEnumnomServiceFilter<$PrismaModel>
  }

  export type NestedEnumtransInterFilter<$PrismaModel = never> = {
    equals?: $Enums.transInter | EnumtransInterFieldRefInput<$PrismaModel>
    in?: $Enums.transInter[]
    notIn?: $Enums.transInter[]
    not?: NestedEnumtransInterFilter<$PrismaModel> | $Enums.transInter
  }

  export type NestedEnumtransInterWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.transInter | EnumtransInterFieldRefInput<$PrismaModel>
    in?: $Enums.transInter[]
    notIn?: $Enums.transInter[]
    not?: NestedEnumtransInterWithAggregatesFilter<$PrismaModel> | $Enums.transInter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumtransInterFilter<$PrismaModel>
    _max?: NestedEnumtransInterFilter<$PrismaModel>
  }

  export type NestedEnumuvTeleFilter<$PrismaModel = never> = {
    equals?: $Enums.uvTele | EnumuvTeleFieldRefInput<$PrismaModel>
    in?: $Enums.uvTele[]
    notIn?: $Enums.uvTele[]
    not?: NestedEnumuvTeleFilter<$PrismaModel> | $Enums.uvTele
  }

  export type NestedEnumuvTeleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.uvTele | EnumuvTeleFieldRefInput<$PrismaModel>
    in?: $Enums.uvTele[]
    notIn?: $Enums.uvTele[]
    not?: NestedEnumuvTeleWithAggregatesFilter<$PrismaModel> | $Enums.uvTele
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuvTeleFilter<$PrismaModel>
    _max?: NestedEnumuvTeleFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserCreateWithoutProfileInput = {
    email: string
    name?: string | null
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: number
    email: string
    name?: string | null
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileCreateWithoutUserInput = {
    bio?: string | null
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    id?: number
    bio?: string | null
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileUpsertWithoutUserInput = {
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUpdateWithoutUserInput = {
    bio?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    bio?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use clientCanalDefaultArgs instead
     */
    export type clientCanalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = clientCanalDefaultArgs<ExtArgs>
    /**
     * @deprecated Use commissionDuMoisDefaultArgs instead
     */
    export type commissionDuMoisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = commissionDuMoisDefaultArgs<ExtArgs>
    /**
     * @deprecated Use creditEntrepriseDefaultArgs instead
     */
    export type creditEntrepriseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = creditEntrepriseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use prepayeeDefaultArgs instead
     */
    export type prepayeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = prepayeeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use serviceEntrepriseDefaultArgs instead
     */
    export type serviceEntrepriseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = serviceEntrepriseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use transInternationDefaultArgs instead
     */
    export type transInternationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = transInternationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use uvAbonnementDefaultArgs instead
     */
    export type uvAbonnementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = uvAbonnementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use caisseDefaultArgs instead
     */
    export type caisseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = caisseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfileDefaultArgs instead
     */
    export type ProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}